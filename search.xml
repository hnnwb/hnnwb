<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>springCloudAlibaba</title>
      <link href="2021/03/14/springcloudalibaba/"/>
      <url>2021/03/14/springcloudalibaba/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-微服务介绍"><a href="#第一章-微服务介绍" class="headerlink" title="第一章 微服务介绍"></a>第一章 微服务介绍</h1><h2 id="1-1-系统架构演变"><a href="#1-1-系统架构演变" class="headerlink" title="1.1  系统架构演变"></a>1.1  系统架构演变</h2><p>​    随着互联网的发展，网站应用的规模也在不断的扩大，进而导致系统架构也在不断的进行变化。  从互联网早起到现在，系统架构大体经历了下面几个过程: 单体应用架构—&gt;垂直应用架构—&gt;分布式架构—&gt;SOA架构—&gt;微服务架构，当然还有悄然兴起的Service Mesh(服务网格化)。接下来我们就来了解一下每种系统架构是什么样子的， 以及各有什么优缺点。</p><h3 id="1-1-1-单体应用架构"><a href="#1-1-1-单体应用架构" class="headerlink" title="1.1.1  单体应用架构"></a>1.1.1  单体应用架构</h3><p>​    互联网早期，一般的网站应用流量较小，只需一个应用，将所有功能代码都部署在一起就可以，这 样可以减少开发、部署和维护的成本。</p><p>​    比如说一个电商系统，里面会包含很多用户管理，商品管理，订单管理，物流管理等等很多模块， 我们会把它们做成一个web项目，然后部署到一台tomcat服务器上。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloudAlibaba/20210314161333.png" alt="image-20210314161333586"></p><h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h4><ul><li>项目架构简单，小型项目的话， 开发成本低</li><li>项目部署在一个节点上， 维护方便</li></ul><h4 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h4><ul><li>全部功能集成在一个工程中，对于大型项目来讲不易开发和维护</li><li>项目模块之间紧密耦合，单点容错率低</li><li>无法针对不同模块进行针对性优化和水平扩展</li></ul><h3 id="1-1-2-垂直应用架构"><a href="#1-1-2-垂直应用架构" class="headerlink" title="1.1.2  垂直应用架构"></a>1.1.2  垂直应用架构</h3><p>​    随着访问量的逐渐增大，单一应用只能依靠增加节点来应对，但是这时候会发现并不是所有的模块 都会有比较大的访问量.</p><p>​    还是以上面的电商为例子， 用户访问量的增加可能影响的只是用户和订单模块， 但是对消息模块的影响就比较小. 那么此时我们希望只多增加几个订单模块， 而不增加消息模块. 此时单体应用就做不到了， 垂直应用就应运而生了.</p><p>​    所谓的垂直应用架构，就是将原来的一个应用拆成互不相干的几个应用，以提升效率。比如我们可 以将上面电商的单体应用拆分成:</p><ul><li>电商系统(用户管理 商品管理 订单管理)</li><li>后台系统(用户管理 订单管理 客户管理)</li><li>CMS系统(广告管理 营销管理)</li></ul><p>这样拆分完毕之后，一旦用户访问量变大，只需要增加电商系统的节点就可以了，而无需增加后台 和CMS的节点。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloudAlibaba/20210314162050.png" alt="image-20210314162050443"></p><h4 id="优点：-1"><a href="#优点：-1" class="headerlink" title="优点："></a>优点：</h4><ul><li>系统拆分实现了流量分担，解决了并发问题，而且可以针对不同模块进行优化和水平扩展</li><li>一个系统的问题不会影响到其他系统，提高容错率</li></ul><h4 id="缺点：-1"><a href="#缺点：-1" class="headerlink" title="缺点："></a>缺点：</h4><ul><li>系统之间相互独立， 无法进行相互调用</li><li>系统之间相互独立， 会有重复的开发任务</li></ul><h3 id="1-1-3-分布式架构"><a href="#1-1-3-分布式架构" class="headerlink" title="1.1.3  分布式架构"></a>1.1.3  分布式架构</h3><p>当垂直应用越来越多，重复的业务代码就会越来越多。这时候，我们就思考可不可以将重复的代码 抽取出来，做成统一的业务层作为独立的服务，然后由前端控制层调用不同的业务层服务呢？</p><p> 这就产生了新的分布式系统架构。它将把工程拆分成表现层和服务层两个部分，服务层中包含业务 逻辑。表现层只需要处理和页面的交互，业务逻辑都是调用服务层的服务来实现。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloudAlibaba/20210314163302.png" alt="image-20210314163302580"></p><h4 id="优点：-2"><a href="#优点：-2" class="headerlink" title="优点："></a>优点：</h4><ul><li>抽取公共的功能为服务层，提高代码复用性</li></ul><h4 id="缺点：-2"><a href="#缺点：-2" class="headerlink" title="缺点："></a>缺点：</h4><ul><li>系统间耦合度变高，调用关系错综复杂，难以维护</li></ul><h3 id="1-1-4-SOA架构"><a href="#1-1-4-SOA架构" class="headerlink" title="1.1.4  SOA架构"></a>1.1.4  SOA架构</h3><p>在分布式架构下，当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加 一个调度中心对集群进行实时管理。此时，用于资源调度和治理中心(SOA Service Oriented Architecture，面向服务的架构)是关键。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloudAlibaba/20210314163455.png" alt="image-20210314163455353"></p><h4 id="优点：-3"><a href="#优点：-3" class="headerlink" title="优点："></a>优点：</h4><ul><li>使用注册中心解决了服务间调用关系的自动调节</li></ul><h4 id="缺点：-3"><a href="#缺点：-3" class="headerlink" title="缺点："></a>缺点：</h4><ul><li>服务间会有依赖关系，一旦某个环节出错会影响较大( 服务雪崩 )</li><li>服务关系复杂，运维、测试部署困难</li></ul><h3 id="1-1-5-微服务架构"><a href="#1-1-5-微服务架构" class="headerlink" title="1.1.5 微服务架构"></a>1.1.5 微服务架构</h3><p>微服务架构在某种程度上是面向服务的架构SOA继续发展的下一步，它更加强调服务的”彻底拆分”。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloudAlibaba/20210314163623.png" alt="image-20210314163623612"></p><h4 id="优点：-4"><a href="#优点：-4" class="headerlink" title="优点："></a>优点：</h4><ul><li>服务原子化拆分，独立打包、部署和升级，保证每个微服务清晰的任务划分，利于扩展</li><li>微服务之间采用Restful等轻量级http协议相互调用</li></ul><h4 id="缺点：-4"><a href="#缺点：-4" class="headerlink" title="缺点："></a>缺点：</h4><ul><li>分布式系统开发的技术成本高（容错、分布式事务等）</li></ul><h2 id="1-2-微服务架构介绍"><a href="#1-2-微服务架构介绍" class="headerlink" title="1.2  微服务架构介绍"></a>1.2  微服务架构介绍</h2><p>微服务架构， 简单的说就是将单体应用进一步拆分，拆分成更小的服务，每个服务都是一个可以独立运行的项目。</p><h3 id="1-2-1-微服务架构的常见问题"><a href="#1-2-1-微服务架构的常见问题" class="headerlink" title="1.2.1  微服务架构的常见问题"></a>1.2.1  微服务架构的常见问题</h3><p>一旦采用微服务系统架构，就势必会遇到这样几个问题：</p><ul><li>这么多小服务，如何管理他们？(服务治理 注册中心[服务注册 发现 剔除]) </li><li>这么多小服务，他们之间如何通讯？(<strong>restful</strong> rpc)</li><li>这么多小服务，客户端怎么访问他们？(网关)</li><li>这么多小服务，一旦出现问题了，应该如何自处理？(容错) </li><li>这么多小服务，一旦出现问题了，应该如何排错? (链路追踪)</li></ul><p>对于上面的问题，是任何一个微服务设计者都不能绕过去的，因此大部分的微服务产品都针对每一 个问题提供了相应的组件来解决它们。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloudAlibaba/20210314163849.png" alt="image-20210314163849136"></p><h3 id="1-2-2-微服务架构的常见概念"><a href="#1-2-2-微服务架构的常见概念" class="headerlink" title="1.2.2  微服务架构的常见概念"></a>1.2.2  微服务架构的常见概念</h3><h4 id="1-2-2-1-服务治理"><a href="#1-2-2-1-服务治理" class="headerlink" title="1.2.2.1 服务治理"></a>1.2.2.1 服务治理</h4><p>服务治理就是进行服务的自动化管理，其核心是服务的自动注册与发现。</p><p><strong>服务注册</strong>：服务实例将自身服务信息注册到注册中心。</p><p><strong>服务发现</strong>：服务实例通过注册中心，获取到注册到其中的服务实例的信息，通过这些信息去请求它们提 供的服务。</p><p><strong>服务剔除</strong>：服务注册中心将出问题的服务自动剔除到可用列表之外，使其不会被调用到。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloudAlibaba/20210314164129.png" alt="image-20210314164129264"></p><h4 id="1-2-2-2-服务调用"><a href="#1-2-2-2-服务调用" class="headerlink" title="1.2.2.2 服务调用"></a>1.2.2.2 服务调用</h4><p>在微服务架构中，通常存在多个服务之间的远程调用的需求。目前主流的远程调用技术有基于</p><p>HTTP的RESTful接口以及基于TCP的RPC协议。</p><ul><li><p><strong>REST</strong>(Representational State Transfer）</p><p>这是一种HTTP调用的格式，更标准，更通用，无论哪种语言都支持http协议</p></li><li><p><strong>RPC</strong>（Remote Promote Call）</p><p>一种进程间通信方式。允许像调用本地服务一样调用远程服务。RPC框架的主要目标就是让远程服 务调用更简单、透明。RPC框架负责屏蔽底层的传输方式、序列化方式和通信细节。开发人员在使 用的时候只需要了解谁在什么位置提供了什么样的远程服务接口即可，并不需要关心底层通信细节 和调用过程。</p></li></ul><p><strong>区别与联系</strong></p><table><thead><tr><th><strong>比较项</strong></th><th><strong>RESTful</strong></th><th><strong>RPC</strong></th></tr></thead><tbody><tr><td>通讯协议</td><td>HTTP</td><td>一般使用TCP</td></tr><tr><td>性能</td><td>略低</td><td>较高</td></tr><tr><td>灵活度</td><td>高</td><td>低</td></tr><tr><td>应用</td><td>微服务架构</td><td>SOA架构</td></tr></tbody></table><h4 id="1-2-2-3-服务网关"><a href="#1-2-2-3-服务网关" class="headerlink" title="1.2.2.3 服务网关"></a>1.2.2.3 服务网关</h4><p>随着微服务的不断增多，不同的微服务一般会有不同的网络地址，而外部客户端可能需要调用多个 服务的接口才能完成一个业务需求，如果让客户端直接与各个微服务通信可能出现：</p><ul><li>客户端需要调用不同的url地址，增加难度</li><li>在一定的场景下，存在跨域请求的问题</li><li>每个微服务都需要进行单独的身份认证</li></ul><p>针对这些问题，API网关顺势而生。</p><p>API网关直面意思是将所有API调用统一接入到API网关层，由网关层统一接入和输出。一个网关的 基本功能有：统一接入、安全防护、协议适配、流量管控、长短链接支持、容错能力。有了网关之后， 各个API服务提供团队可以专注于自己的的业务逻辑处理，而API网关更专注于安全、流量、路由等问题。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloudAlibaba/20210314164405.png" alt="image-20210314164405474"></p><h4 id="1-2-2-4-服务容错"><a href="#1-2-2-4-服务容错" class="headerlink" title="1.2.2.4 服务容错"></a>1.2.2.4 服务容错</h4><p>在微服务当中，一个请求经常会涉及到调用几个服务，如果其中某个服务不可用，没有做服务容错 的话，极有可能会造成一连串的服务不可用，这就是雪崩效应。</p><p>我们没法预防雪崩效应的发生，只能尽可能去做好容错。服务容错的三个核心思想是：</p><ul><li>不被外界环境影响</li><li>不被上游请求压垮</li><li>不被下游响应拖垮</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloudAlibaba/20210314164515.png" alt="image-20210314164515852"></p><h4 id="1-2-2-5-链路追踪"><a href="#1-2-2-5-链路追踪" class="headerlink" title="1.2.2.5 链路追踪"></a>1.2.2.5 链路追踪</h4><p>随着微服务架构的流行，服务按照不同的维度进行拆分，一次请求往往需要涉及到多个服务。互联 网应用构建在不同的软件模块集上，这些软件模块，有可能是由不同的团队开发、可能使用不同的编程 语言来实现、有可能布在了几千台服务器，横跨多个不同的数据中心。因此，就需要对一次请求涉及的 多个服务链路进行日志记录，性能监控即链路追踪</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloudAlibaba/20210314164555.png" alt="image-20210314164555735"></p><h3 id="1-2-3-微服务架构的常见解决方"><a href="#1-2-3-微服务架构的常见解决方" class="headerlink" title="1.2.3  微服务架构的常见解决方"></a>1.2.3  微服务架构的常见解决方</h3><h4 id="1-2-3-1-ServiceComb"><a href="#1-2-3-1-ServiceComb" class="headerlink" title="1.2.3.1 ServiceComb"></a>1.2.3.1 ServiceComb</h4><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloudAlibaba/20210314164658.png" alt="image-20210314164658342"></p><p>Apache ServiceComb，前身是华为云的微服务引擎 CSE (Cloud Service Engine) 云服务，是全球首个Apache微服务顶级项目。它提供了一站式的微服务开源解决方案，致力于帮助企业、用户和开发 者将企业应用轻松微服务化上云，并实现对微服务应用的高效运维管理。</p><h4 id="1-2-3-2-SpringCloud"><a href="#1-2-3-2-SpringCloud" class="headerlink" title="1.2.3.2 SpringCloud"></a>1.2.3.2 SpringCloud</h4><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloudAlibaba/20210314164730.png" alt="image-20210314164729867"></p><p>Spring Cloud是一系列框架的集合。它利用Spring Boot的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控等，都可以用Spring Boot的开发风格做到一键启动和部署。</p><p>Spring  Cloud并没有重复制造轮子，它只是将目前各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过Spring  Boot风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包。</p><h4 id="1-2-3-3-SpringCloud-Alibaba"><a href="#1-2-3-3-SpringCloud-Alibaba" class="headerlink" title="1.2.3.3 SpringCloud Alibaba"></a>1.2.3.3 SpringCloud Alibaba</h4><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloudAlibaba/20210314164809.png" alt="image-20210314164809605"></p><p>Spring Cloud Alibaba 致力于提供微服务开发的一站式解决方案。此项目包含开发分布式应用微服务的必需组件，方便开发者通过 Spring Cloud 编程模型轻松使用这些组件来开发分布式应用服务。</p><h2 id="1-3-SpringCloud-Alibaba介绍"><a href="#1-3-SpringCloud-Alibaba介绍" class="headerlink" title="1.3  SpringCloud Alibaba介绍"></a>1.3  SpringCloud Alibaba介绍</h2><p>Spring Cloud Alibaba 致力于提供微服务开发的一站式解决方案。此项目包含开发分布式应用微服务的必需组件，方便开发者通过 Spring Cloud 编程模型轻松使用这些组件来开发分布式应用服务。</p><p>依托 Spring Cloud Alibaba，您只需要添加一些注解和少量配置，就可以将 Spring Cloud 应用接入阿里微服务解决方案，通过阿里中间件来迅速搭建分布式应用系统。</p><h3 id="1-3-1-主要功能"><a href="#1-3-1-主要功能" class="headerlink" title="1.3.1  主要功能"></a>1.3.1  主要功能</h3><ul><li><strong>服务限流降级</strong>：默认支持 WebServlet、WebFlux， OpenFeign、RestTemplate、Spring Cloud Gateway， Zuul， Dubbo 和 RocketMQ 限流降级功能的接入，可以在运行时通过控制台实时修改限流降级规则，还支持查看限流降级 Metrics 监控。</li><li><strong>服务注册与发现</strong>：适配 Spring Cloud 服务注册与发现标准，默认集成了 Ribbon 的支持。</li><li><strong>分布式配置管理</strong>：支持分布式系统中的外部化配置，配置更改时自动刷新。</li><li><strong>消息驱动能力</strong>：基于 Spring Cloud Stream 为微服务应用构建消息驱动能力。</li><li><strong>分布式事务</strong>：使用 @GlobalTransactional 注解， 高效并且对业务零侵入地解决分布式事务问题。</li><li><strong>阿里云对象存储</strong>：阿里云提供的海量、安全、低成本、高可靠的云存储服务。支持在任何应用、任 何时间、任何地点存储和访问任意类型的数据。</li><li><strong>分布式任务调度</strong>：提供秒级、精准、高可靠、高可用的定时（基于 Cron 表达式）任务调度服务。同时提供分布式的任务执行模型，如网格任务。网格任务支持海量子任务均匀分配到所有Worker（schedulerx-client）上执行。</li><li><strong>阿里云短信服务</strong>：覆盖全球的短信服务，友好、高效、智能的互联化通讯能力，帮助企业迅速搭建 客户触达通道。</li></ul><h3 id="1-3-2-组件"><a href="#1-3-2-组件" class="headerlink" title="1.3.2  组件"></a>1.3.2  组件</h3><ul><li><strong>Sentinel</strong>：把流量作为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。</li><li><strong>Nacos</strong>：一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。</li><li><strong>RocketMQ</strong>：一款开源的分布式消息系统，基于高可用分布式集群技术，提供低延时的、高可靠 的消息发布与订阅服务。</li><li><strong>Dubbo</strong>：Apache Dubbo™ 是一款高性能 Java RPC 框架。</li><li><strong>Seata</strong>：阿里巴巴开源产品，一个易于使用的高性能微服务分布式事务解决方案。</li><li><strong>Alibaba Cloud ACM</strong>：一款在分布式架构环境中对应用配置进行集中管理和推送的应用配置中心产品。</li><li><strong>Alibaba Cloud OSS</strong>: 阿里云对象存储服务（Object Storage Service，简称 OSS），是阿里云提 供的海量、安全、低成本、高可靠的云存储服务。您可以在任何应用、任何时间、任何地点存储和 访问任意类型的数据。</li><li><strong>Alibaba Cloud SchedulerX</strong>: 阿里中间件团队开发的一款分布式任务调度产品，提供秒级、精准、高可靠、高可用的定时（基于 Cron 表达式）任务调度服务。</li><li><strong>Alibaba Cloud SMS</strong>: 覆盖全球的短信服务，友好、高效、智能的互联化通讯能力，帮助企业迅速搭建客户触达通道。</li></ul><h1 id="第二章-微服务环境搭建"><a href="#第二章-微服务环境搭建" class="headerlink" title="第二章 微服务环境搭建"></a>第二章 微服务环境搭建</h1><p>本次是使用的电商项目中的商品、订单、用户为案例进行讲解。</p><h2 id="2-1-案例准备"><a href="#2-1-案例准备" class="headerlink" title="2.1  案例准备"></a>2.1  案例准备</h2><h3 id="2-1-1-技术选型"><a href="#2-1-1-技术选型" class="headerlink" title="2.1.1  技术选型"></a>2.1.1  技术选型</h3><p>maven：3.3.9</p><p>数据库：MySQL 5.7</p><p>持久层: SpingData Jpa</p><p>其他: SpringCloud Alibaba 技术栈</p><h3 id="2-1-2-模块设计"><a href="#2-1-2-模块设计" class="headerlink" title="2.1.2  模块设计"></a>2.1.2  模块设计</h3><ul><li>springcloud-alibaba 父工程</li><li>shop-common 公共模块【实体类】</li><li>shop-user 用户微服务 【端口: 807x】</li><li>shop-product 商品微服务 【端口: 808x】</li><li>shop-order 订单微服务 【端口: 809x】</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloudAlibaba/20210314170040.png" alt="image-20210314170040663"></p><h3 id="2-1-3-微服务调用"><a href="#2-1-3-微服务调用" class="headerlink" title="2.1.3  微服务调用"></a>2.1.3  微服务调用</h3><p>在微服务架构中，最常见的场景就是微服务之间的相互调用。我们以电商系统中常见的<strong>用户下单</strong>为 例来演示微服务的调用：客户向订单微服务发起一个下单的请求，在进行保存订单之前需要调用商品微 服务查询商品的信息。</p><p>我们一般把服务的主动调用方称为<strong>服务消费者</strong>，把服务的被调用方称为<strong>服务提供者</strong>。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloudAlibaba/20210314170114.png" alt="image-20210314170114588"></p><p>在这种场景下，订单微服务就是一个服务消费者， 商品微服务就是一个服务提供者。</p><h2 id="2-2-创建父工程"><a href="#2-2-创建父工程" class="headerlink" title="2.2  创建父工程"></a>2.2  创建父工程</h2><p>创建一个maven工程，然后在pom.xml文件中添加下面内容</p>]]></content>
      
      
      <categories>
          
          <category> springCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springCloudAlibaba </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker常用命令</title>
      <link href="2021/01/25/docker-chang-yong-ming-ling/"/>
      <url>2021/01/25/docker-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker常用命令"><a href="#Docker常用命令" class="headerlink" title="Docker常用命令"></a>Docker常用命令</h1><h2 id="1、Docker容器信息"><a href="#1、Docker容器信息" class="headerlink" title="1、Docker容器信息"></a>1、Docker容器信息</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##查看docker容器版本</span><br><span class="line">docker version</span><br><span class="line">##查看docker容器信息</span><br><span class="line">docker info</span><br><span class="line">##查看docker容器帮助</span><br><span class="line">docker --help</span><br></pre></td></tr></table></figure><h2 id="2、镜像操作"><a href="#2、镜像操作" class="headerlink" title="2、镜像操作"></a>2、镜像操作</h2><p>提示：对于镜像的操作可使用镜像名、镜像长ID和短ID。</p><h3 id="2-1、镜像查看"><a href="#2-1、镜像查看" class="headerlink" title="2.1、镜像查看"></a>2.1、镜像查看</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##列出本地images</span><br><span class="line">docker images</span><br><span class="line">##含中间映像层</span><br><span class="line">docker images -a</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/Docker/20210125173048.png" alt="image-20210125173048887"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##只显示镜像ID</span><br><span class="line">docker images -q</span><br><span class="line">##含中间映像层</span><br><span class="line">docker images -qa   </span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/Docker/20210125173111.png" alt="image-20210125173111671"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##显示镜像摘要信息(DIGEST列)</span><br><span class="line">docker images --digests</span><br><span class="line">##显示镜像完整信息</span><br><span class="line">docker images --no-trunc</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/Docker/20210125173137.png" alt="image-20210125173137749"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##搜索仓库MySQL镜像</span><br><span class="line">docker search mysql</span><br><span class="line">## --filter&#x3D;stars&#x3D;600：只显示 starts&gt;&#x3D;600 的镜像</span><br><span class="line">docker search --filter&#x3D;stars&#x3D;600 mysql</span><br><span class="line">## --no-trunc 显示镜像完整 DESCRIPTION 描述</span><br><span class="line">docker search --no-trunc mysql</span><br><span class="line">## --automated ：只列出 AUTOMATED&#x3D;OK 的镜像</span><br><span class="line">docker search  --automated mysql</span><br></pre></td></tr></table></figure><h3 id="2-2、镜像搜索"><a href="#2-2、镜像搜索" class="headerlink" title="2.2、镜像搜索"></a>2.2、镜像搜索</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##搜索仓库MySQL镜像</span><br><span class="line">docker search mysql</span><br><span class="line">## --filter&#x3D;stars&#x3D;600：只显示 starts&gt;&#x3D;600 的镜像</span><br><span class="line">docker search --filter&#x3D;stars&#x3D;600 mysql</span><br><span class="line">## --no-trunc 显示镜像完整 DESCRIPTION 描述</span><br><span class="line">docker search --no-trunc mysql</span><br><span class="line">## --automated ：只列出 AUTOMATED&#x3D;OK 的镜像</span><br><span class="line">docker search  --automated mysql</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/Docker/20210125173222.png" alt="image-20210125173222656"></p><h3 id="2-3、镜像下载"><a href="#2-3、镜像下载" class="headerlink" title="2.3、镜像下载"></a>2.3、镜像下载</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##下载Redis官方最新镜像，相当于：docker pull redis:latest</span><br><span class="line">docker pull redis</span><br><span class="line">##下载仓库所有Redis镜像</span><br><span class="line">docker pull -a redis</span><br><span class="line">##下载私人仓库镜像</span><br><span class="line">docker pull bitnami&#x2F;redis</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/Docker/20210125173253.png" alt="image-20210125173253458"></p><h3 id="2-4、镜像删除"><a href="#2-4、镜像删除" class="headerlink" title="2.4、镜像删除"></a>2.4、镜像删除</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##单个镜像删除，相当于：docker rmi redis:latest</span><br><span class="line">docker rmi redis</span><br><span class="line">##强制删除(针对基于镜像有运行的容器进程)</span><br><span class="line">docker rmi -f redis</span><br><span class="line">##多个镜像删除，不同镜像间以空格间隔</span><br><span class="line">docker rmi -f redis tomcat nginx</span><br><span class="line">##删除本地全部镜像</span><br><span class="line">docker rmi -f $(docker images -q)</span><br></pre></td></tr></table></figure><h3 id="2-5、镜像构建"><a href="#2-5、镜像构建" class="headerlink" title="2.5、镜像构建"></a>2.5、镜像构建</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##（1）编写dockerfile</span><br><span class="line">cd &#x2F;docker&#x2F;dockerfile</span><br><span class="line">vim mycentos</span><br><span class="line">##（2）构建docker镜像</span><br><span class="line">docker build -f &#x2F;docker&#x2F;dockerfile&#x2F;mycentos -t mycentos:1.1</span><br></pre></td></tr></table></figure><h2 id="3、容器操作"><a href="#3、容器操作" class="headerlink" title="3、容器操作"></a>3、容器操作</h2><p>提示：对于容器的操作可使用CONTAINER ID 或 NAMES。</p><h3 id="3-1、容器启动"><a href="#3-1、容器启动" class="headerlink" title="3.1、容器启动"></a>3.1、容器启动</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##新建并启动容器，参数：-i  以交互模式运行容器；-t  为容器重新分配一个伪输入终端；--name  为容器指定一个名称</span><br><span class="line">docker run -i -t --name mycentos</span><br><span class="line">##后台启动容器，参数：-d  已守护方式启动容器</span><br><span class="line">docker run -d mycentos</span><br></pre></td></tr></table></figure><p>注意：此时使用”docker ps -a”会发现容器已经退出。这是docker的机制：要使Docker容器后台运行，就必须有一个前台进程。解决方案：将你要运行的程序以前台进程的形式运行。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##启动一个或多个已经被停止的容器</span><br><span class="line">docker start redis</span><br><span class="line">##重启容器</span><br><span class="line">docker restart redis</span><br></pre></td></tr></table></figure><h3 id="3-2、容器进程"><a href="#3-2、容器进程" class="headerlink" title="3.2、容器进程"></a>3.2、容器进程</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##top支持 ps 命令参数，格式：docker top [OPTIONS] CONTAINER [ps OPTIONS]</span><br><span class="line">##列出redis容器中运行进程</span><br><span class="line">docker top redis</span><br><span class="line">##查看所有运行容器的进程信息</span><br><span class="line">for i in  &#96;docker ps |grep Up|awk &#39;&#123;print $1&#125;&#39;&#96;;do echo \ &amp;&amp;docker top $i; done</span><br></pre></td></tr></table></figure><h3 id="3-3、容器日志"><a href="#3-3、容器日志" class="headerlink" title="3.3、容器日志"></a>3.3、容器日志</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##查看redis容器日志，默认参数</span><br><span class="line">docker logs rabbitmq</span><br><span class="line">##查看redis容器日志，参数：-f  跟踪日志输出；-t   显示时间戳；--tail  仅列出最新N条容器日志；</span><br><span class="line">docker logs -f -t --tail&#x3D;20 redis</span><br><span class="line">##查看容器redis从2019年05月21日后的最新10条日志。</span><br><span class="line">docker logs --since&#x3D;&quot;2019-05-21&quot; --tail&#x3D;10 redis</span><br></pre></td></tr></table></figure><h3 id="3-4、容器的进入与退出"><a href="#3-4、容器的进入与退出" class="headerlink" title="3.4、容器的进入与退出"></a>3.4、容器的进入与退出</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##使用run方式在创建时进入</span><br><span class="line">docker run -it centos &#x2F;bin&#x2F;bash</span><br><span class="line">##关闭容器并退出</span><br><span class="line">exit</span><br><span class="line">##仅退出容器，不关闭</span><br><span class="line">快捷键：Ctrl + P + Q</span><br><span class="line">##直接进入centos 容器启动命令的终端，不会启动新进程，多个attach连接共享容器屏幕，参数：--sig-proxy&#x3D;false  确保CTRL-D或CTRL-C不会关闭容器</span><br><span class="line">docker attach --sig-proxy&#x3D;false centos </span><br><span class="line">##在 centos 容器中打开新的交互模式终端，可以启动新进程，参数：-i  即使没有附加也保持STDIN 打开；-t  分配一个伪终端</span><br><span class="line">docker exec -i -t  centos &#x2F;bin&#x2F;bash</span><br><span class="line">##以交互模式在容器中执行命令，结果返回到当前终端屏幕</span><br><span class="line">docker exec -i -t centos ls -l &#x2F;tmp</span><br><span class="line">##以分离模式在容器中执行命令，程序后台运行，结果不会反馈到当前终端</span><br><span class="line">docker exec -d centos  touch cache.txt </span><br></pre></td></tr></table></figure><h3 id="3-5、查看容器"><a href="#3-5、查看容器" class="headerlink" title="3.5、查看容器"></a>3.5、查看容器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##查看正在运行的容器</span><br><span class="line">docker ps</span><br><span class="line">##查看正在运行的容器的ID</span><br><span class="line">docker ps -q</span><br><span class="line">##查看正在运行+历史运行过的容器</span><br><span class="line">docker ps -a</span><br><span class="line">##显示运行容器总文件大小</span><br><span class="line">docker ps -s</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/Docker/20210125173610.png" alt="image-20210125173610320"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##显示最近创建容器</span><br><span class="line">docker ps -l</span><br><span class="line">##显示最近创建的3个容器</span><br><span class="line">docker ps -n 3</span><br><span class="line">##不截断输出</span><br><span class="line">docker ps --no-trunc </span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/Docker/20210125173629.png" alt="image-20210125173629716"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##获取镜像redis的元信息</span><br><span class="line">docker inspect redis</span><br><span class="line">##获取正在运行的容器redis的 IP</span><br><span class="line">docker inspect --format&#x3D;&#39;&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&#39; redis</span><br></pre></td></tr></table></figure><h3 id="3-6、容器的停止与删除"><a href="#3-6、容器的停止与删除" class="headerlink" title="3.6、容器的停止与删除"></a>3.6、容器的停止与删除</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##停止一个运行中的容器</span><br><span class="line">docker stop redis</span><br><span class="line">##杀掉一个运行中的容器</span><br><span class="line">docker kill redis</span><br><span class="line">##删除一个已停止的容器</span><br><span class="line">docker rm redis</span><br><span class="line">##删除一个运行中的容器</span><br><span class="line">docker rm -f redis</span><br><span class="line">##删除多个容器</span><br><span class="line">docker rm -f $(docker ps -a -q)</span><br><span class="line">docker ps -a -q | xargs docker rm</span><br><span class="line">## -l 移除容器间的网络连接，连接名为 db</span><br><span class="line">docker rm -l db </span><br><span class="line">## -v 删除容器，并删除容器挂载的数据卷</span><br><span class="line">docker rm -v redis</span><br></pre></td></tr></table></figure><h3 id="3-7、生成镜像"><a href="#3-7、生成镜像" class="headerlink" title="3.7、生成镜像"></a>3.7、生成镜像</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##基于当前redis容器创建一个新的镜像；参数：-a 提交的镜像作者；-c 使用Dockerfile指令来创建镜像；-m :提交时的说明文字；-p :在commit时，将容器暂停</span><br><span class="line">docker commit -a&#x3D;&quot;DeepInThought&quot; -m&#x3D;&quot;my redis&quot; [redis容器ID]  myredis:v1.1</span><br></pre></td></tr></table></figure><h3 id="3-8、容器与主机间的数据拷贝"><a href="#3-8、容器与主机间的数据拷贝" class="headerlink" title="3.8、容器与主机间的数据拷贝"></a>3.8、容器与主机间的数据拷贝</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##将rabbitmq容器中的文件copy至本地路径</span><br><span class="line">docker cp rabbitmq:&#x2F;[container_path] [local_path]</span><br><span class="line">##将主机文件copy至rabbitmq容器</span><br><span class="line">docker cp [local_path] rabbitmq:&#x2F;[container_path]&#x2F;</span><br><span class="line">##将主机文件copy至rabbitmq容器，目录重命名为[container_path]（注意与非重命名copy的区别）</span><br><span class="line">docker cp [local_path] rabbitmq:&#x2F;[container_path]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
          <category> 虚拟容器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springCloud全家桶</title>
      <link href="2021/01/14/springcloud-quan-jia-tong/"/>
      <url>2021/01/14/springcloud-quan-jia-tong/</url>
      
        <content type="html"><![CDATA[<div class="note info flat"><p>注：以下内容摘自个人日常笔记+收集笔记</p></div><h1 id="SpringCloud全家桶"><a href="#SpringCloud全家桶" class="headerlink" title="SpringCloud全家桶"></a>SpringCloud全家桶</h1><h2 id="什么是微服务"><a href="#什么是微服务" class="headerlink" title="什么是微服务"></a>什么是微服务</h2><ul><li>官网: <a href="https://www.martinfowler.com/articles/microservices.html">https://www.martinfowler.com/articles/microservices.html</a></li></ul><p>In short, the microservice architectural style is an approach to developing a single application as <code>a suite of small services</code>, each <code>running in its own process</code> and communicating with lightweight mechanisms, often an HTTP resource API. These services are <code>built around business capabilities</code> and <code>independently deployable</code> by fully automated deployment machinery. <code>There is a bare minimum of centralized management of these services</code>, which may be written in different programming languages and use different data storage technologies.                        —–[摘自官网]</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> a suite of small services                      --一系列微小服务</span><br><span class="line"><span class="bullet">-</span> running in its own process                                    --运行在自己的进程里</span><br><span class="line"><span class="bullet">-</span> built around business capabilities                            --围绕自己的业务开发</span><br><span class="line"><span class="bullet">-</span> independently deployable                                      --独立部署</span><br><span class="line"><span class="bullet">-</span> bare minimum of centralized management of these services      --基于分布式管理</span><br></pre></td></tr></table></figure><ul><li><p>官方定义:<strong>微服务就是由一系列围绕自己业务开发的微小服务构成,他们独立部署运行在自己的进程里,基于分布式的管理</strong></p><p>App 应学项目  分类模块   视频模块 评论模块  用户模块  统计模块…    单体应用</p><p>分类服务     独立应用  —&gt; 计算进程里面 —&gt;  独立部署   </p><p>视频服务                                                                                     基于分布式服务管理</p><p>评论服务</p><p>用户服务</p><p>….服务</p></li><li><p>通俗定义:<strong>微服务是一种架构，这种架构是将单个的整体应用程序分割成更小的项目关联的独立的服务。一个服务通常实现一组独立的特性或功能，包含自己的业务逻辑和适配器。各个微服务之间的关联通过暴露api来实现。这些独立的微服务不需要部署在同一个虚拟机，同一个系统和同一个应用服务器中。</strong></p></li></ul><h2 id="为什么是微服务"><a href="#为什么是微服务" class="headerlink" title="为什么是微服务?"></a>为什么是微服务?</h2><h3 id="单体应用"><a href="#单体应用" class="headerlink" title="单体应用"></a>单体应用</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114150347.png" alt="image-20200708224716035"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.优点</span></span><br><span class="line"><span class="bullet">-</span>单一架构模式在项目初期很小的时候开发方便，测试方便，部署方便，运行良好。</span><br><span class="line"></span><br><span class="line"><span class="section"># 2.缺点</span></span><br><span class="line"><span class="bullet">-</span> 应用随着时间的推进，加入的功能越来越多，最终会变得巨大，一个项目中很有可能数百万行的代码，互相之间繁琐的jar包。</span><br><span class="line"><span class="bullet">-</span> 久而久之，开发效率低，代码维护困难</span><br><span class="line"><span class="bullet">-</span> 还有一个如果想整体应用采用新的技术，新的框架或者语言，那是不可能的。</span><br><span class="line"><span class="bullet">-</span> 任意模块的漏洞或者错误都会影响这个应用，降低系统的可靠性</span><br></pre></td></tr></table></figure><h3 id="微服务架构应用"><a href="#微服务架构应用" class="headerlink" title="微服务架构应用"></a>微服务架构应用</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114150353.png" alt="image-20200723155352063"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.优点</span></span><br><span class="line"><span class="bullet">-</span> 将服务拆分成多个单一职责的小的服务，进行单独部署，服务之间通过网络进行通信</span><br><span class="line"><span class="bullet">-</span> 每个服务应该有自己单独的管理团队，高度自治</span><br><span class="line"><span class="bullet">-</span> 服务各自有自己单独的职责，服务之间松耦合，避免因一个模块的问题导致服务崩溃</span><br><span class="line"></span><br><span class="line"><span class="section"># 2.缺点</span></span><br><span class="line"><span class="bullet">-</span> 开发人员要处理分布式系统的复杂性</span><br><span class="line"><span class="bullet">-</span> 多服务运维难度，随着服务的增加，运维的压力也在增大</span><br><span class="line"><span class="bullet">-</span> 服务治理 和 服务监控 关键</span><br></pre></td></tr></table></figure><h3 id="架构的演变"><a href="#架构的演变" class="headerlink" title="架构的演变"></a>架构的演变</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.架构的演变过程</span></span><br><span class="line"><span class="bullet">-</span> [单一应用架构] <span class="code">`===&gt;`</span> [垂直应用架构] <span class="code">`===&gt;`</span> [分布式服务架构] <span class="code">`===&gt;`</span> [流动计算架构]||[微服务架构] <span class="code">`===&gt;`</span> [未知]</span><br></pre></td></tr></table></figure><ul><li>dubbo官网:<a href="http://dubbo.apache.org/zh-cn/docs/user/preface/background.html">http://dubbo.apache.org/zh-cn/docs/user/preface/background.html</a></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114150359.png" alt="image-20200318082336122"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1. All in One Application 单一架构</span></span><br><span class="line"><span class="bullet">-</span> 起初当网站流量很小时,将所有功能都写在一个应用里面,对整个应用进行部署,以减少部署节点和成本。对于这个架构简化增删改查的工作量的数据访问框架（ORM）是关键。</span><br><span class="line"></span><br><span class="line"><span class="section"># 2. Vertical Application 垂直架构</span></span><br><span class="line"><span class="bullet">-</span> 当访问量逐渐增大，单一应用增加机器带来的加速度越来越小，提升效率的方法之一是将应用拆成互不相干的几个应用，以提升效率。此时，用于加速前端页面开发的Web框架(MVC)是关键。</span><br><span class="line"></span><br><span class="line"><span class="section"># 3. Distributed Service    分布式服务架构</span></span><br><span class="line"><span class="bullet">-</span> 当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的分布式服务框架(RPC)是关键。</span><br><span class="line"></span><br><span class="line"><span class="section"># 4. Elastic Computing流动计算架构即微服务架构</span></span><br><span class="line"><span class="bullet">-</span> 当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于提高机器利用率的资源调度和治理中心(SOA)是关键</span><br></pre></td></tr></table></figure><ul><li>友情提醒: <strong>好的架构并不是设计出来的,一定是进化来的!!!</strong></li></ul><h2 id="什么是SpringCloud"><a href="#什么是SpringCloud" class="headerlink" title="什么是SpringCloud"></a>什么是SpringCloud</h2><h3 id="官方定义"><a href="#官方定义" class="headerlink" title="官方定义"></a>官方定义</h3><ul><li>官方网址: <a href="https://cloud.spring.io/spring-cloud-static/Hoxton.SR5/reference/html/">https://cloud.spring.io/spring-cloud-static/Hoxton.SR5/reference/html/</a></li></ul><p><strong>Spring Cloud provides tools for developers to quickly build some of the common patterns in distributed systems</strong> (e.g. <code>configuration management</code>,<code> service discovery</code>, <code>circuit breakers, intelligent routing, micro-proxy, control bus</code>). Coordination of distributed systems leads to boiler plate patterns, and using Spring Cloud developers can quickly stand up services and applications that implement those patterns.  ——-[摘自官网]</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.翻译</span></span><br><span class="line"><span class="bullet">-</span> springcloud为开发人员提供了在分布式系统中快速构建一些通用模式的工具（例如配置管理、服务发现、断路器、智能路由、微代理、控制总线）。分布式系统的协调导致了锅炉板模式，使用springcloud开发人员可以快速地建立实现这些模式的服务和应用程序。</span><br><span class="line"></span><br><span class="line"><span class="section"># 2.通俗理解</span></span><br><span class="line"><span class="bullet">-</span> springcloud是一个含概多个子项目的开发工具集,集合了众多的开源框架,他利用了Spring Boot开发的便利性实现了很多功能,如服务注册,服务注册发现,负载均衡等.SpringCloud在整合过程中主要是针对Netflix(耐非)开源组件的封装.SpringCloud的出现真正的简化了分布式架构的开发。</span><br><span class="line"><span class="bullet">-</span> NetFlix 是美国的一个在线视频网站,微服务业的翘楚,他是公认的大规模生产级微服务的杰出实践者,NetFlix的开源组件已经在他大规模分布式微服务环境中经过多年的生产实战验证,因此Spring Cloud中很多组件都是基于NetFlix组件的封装。</span><br><span class="line"></span><br><span class="line"><span class="section"># 3.微服务架构下所存在问题?</span></span><br><span class="line"><span class="bullet">-</span>   基于独立业务拆分成一个微小的服务  每个服务独立部署 运行在自己的进程里面   服务之间使用http rest的方式进行通信</span><br><span class="line"><span class="bullet">-</span>   单体应用  分类模块  视频模块  用户模块    产生  测试    前端 pc  app  统一入口 localhost:8989</span><br><span class="line"><span class="bullet">-</span>   微服务架构应用   分类服务 8080  视频服务 8081  用户服务 8082 8083  .....</span><br><span class="line"><span class="bullet">-</span>   问题</span><br><span class="line"><span class="code">1.要有个组件帮助我们记录服务,监控服务,服务发现  服务注册和发现组件  注册中心</span></span><br><span class="line"><span class="code">2.服务调用问题http rest方式调用  --- 如何调用? 服务调用时如何实现服务负载均衡 ?</span></span><br><span class="line"><span class="code">3.服务雪崩效应?  </span></span><br><span class="line"><span class="code">4.服务配置文件管理?   </span></span><br><span class="line"><span class="code">5.网关组件?    </span></span><br></pre></td></tr></table></figure><h3 id="核心架构及其组件"><a href="#核心架构及其组件" class="headerlink" title="核心架构及其组件"></a>核心架构及其组件</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.核心组件说明</span></span><br><span class="line"><span class="bullet">-</span> eurekaserver、consul、nacos    服务注册中心组件</span><br><span class="line"><span class="bullet">-</span> rabbion &amp; openfeign      服务负载均衡 和 服务调用组件</span><br><span class="line"><span class="bullet">-</span> hystrix &amp; hystrix dashboard   服务断路器  和  服务监控组件</span><br><span class="line"><span class="bullet">-</span> zuul、gateway 服务网关组件</span><br><span class="line"><span class="bullet">-</span> config 统一配置中心组件</span><br><span class="line"><span class="bullet">-</span> bus                           消息总线组件</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114150444.png" alt="image-20200724161314786"></p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="版本命名"><a href="#版本命名" class="headerlink" title="版本命名"></a>版本命名</h3><ul><li>官网地址:<a href="https://spring.io/projects/spring-cloud">https://spring.io/projects/spring-cloud</a></li></ul><p>Spring Cloud is an umbrella(伞) project consisting of independent projects with, in principle, different release cadences. To manage the portfolio a BOM (Bill of Materials) is published with a curated set of dependencies on the individual project (see below). The release trains have names, not versions, to avoid confusion with the sub-projects. The names are an alphabetic sequence (so you can sort them chronologically) with names of London Tube stations (“Angel” is the first release, “Brixton” is the second). When point releases of the individual projects accumulate to a critical mass, or if there is a critical bug in one of them that needs to be available to everyone, the release train will push out “service releases” with names ending “.SRX”, where “X” is a number.     —[摘自官网]</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.翻译</span></span><br><span class="line"><span class="bullet">-</span> springcloud 版本管理方式: 命名方式  Angel.SR1~6 Brixton.SR1~6 Camden.SR1~6</span><br><span class="line"><span class="bullet">-</span> springcloud是一个由众多独立子项目组成的大型综合项目，原则每个子项目上有不同的发布节奏,都维护自己发布版本号。为了更好的管理springcloud的版本,通过一个资源清单BOM(Bill of Materials),为避免与子项目的发布号混淆，所以没有采用版本号的方式，而是通过命名的方式。这些名字是按字母顺序排列的。如伦敦地铁站的名称（“天使”是第一个版本，“布里斯顿”是第二个版本,&quot;卡姆登&quot;是第三个版本）。当单个项目的点发布累积到一个临界量，或者其中一个项目中有一个关键缺陷需要每个人都可以使用时，发布序列将推出名称以“.SRX”结尾的“服务发布”，其中“X”是一个数字。</span><br><span class="line"></span><br><span class="line"><span class="section"># 2.伦敦地铁站名称 [了解]</span></span><br><span class="line"><span class="bullet">-</span> Angel、Brixton、Camden、Dalston、Edgware、Finchley、Greenwich、Hoxton、</span><br></pre></td></tr></table></figure><h3 id="版本选择"><a href="#版本选择" class="headerlink" title="版本选择"></a>版本选择</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.版本选择官方建议 https://spring.io/projects/spring-cloud</span></span><br><span class="line"><span class="bullet">-</span> Angel 版本基于springboot1.2.x版本构建与1.3版本不兼容</span><br><span class="line"><span class="bullet">-</span> Brixton版本基于springboot1.3.x版本构建与1.2版本不兼容</span><br><span class="line"><span class="code">`2017年Brixton and Angel release官方宣布报废</span></span><br><span class="line"><span class="code">- Camden      版本基于springboot1.4.x版本构建并在1.5版本通过测试</span></span><br><span class="line"><span class="code">`2018年Camden release官方宣布报废</span></span><br><span class="line"><span class="code">- Dalston、Edgware  版本基于springboot1.5.x版本构建目前不能再springboot2.0.x版本中使用</span></span><br><span class="line"><span class="code">`Dalston(达尔斯顿)将于2018年12月官方宣布报废。Edgware将遵循Spring Boot 1.5.x的生命周期结束。</span></span><br><span class="line"><span class="code">- Finchley 版本基于springboot2.0.x版本进行构建,不能兼容1.x版本</span></span><br><span class="line"><span class="code">- Greenwich版本基于springboot2.1.x版本进行构建,不能兼容1.x版本</span></span><br><span class="line"><span class="code">- Hoxton版本基于springboot2.2.x版本进行构建</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114150452.png" alt="image-20200709112427684"></p><h3 id="环境搭建-1"><a href="#环境搭建-1" class="headerlink" title="环境搭建"></a>环境搭建</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 0.说明</span></span><br><span class="line"><span class="bullet">-</span> springboot 2.2.x.RELEASE+</span><br><span class="line"><span class="bullet">-</span> springcloud Hoxton SR1~6</span><br><span class="line"><span class="bullet">-</span> java8+</span><br><span class="line"><span class="bullet">-</span> maven 3.3.6+</span><br><span class="line"><span class="bullet">-</span> idea 2018.3.5+</span><br><span class="line"></span><br><span class="line"><span class="section"># 1.创建springboot项目 指定版本为 2.2.5版本</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114150455.png" alt="image-20200709115802270"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 2.引入springcloud的版本管理</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--定义springcloud使用版本号--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Hoxton.SR6<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--全局管理springcloud版本,并不会引入具体依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114150504.png" alt="image-20200709120120478"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114150500.png" alt="image-20200709120209047"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 3.完成上述操作springboot与springcloud环境搭建完成</span></span><br><span class="line"><span class="bullet">-</span> 接下来就是使用到具体的springcloud组件,在项目中引入具体的组件即可</span><br></pre></td></tr></table></figure><hr><h2 id="服务注册中心"><a href="#服务注册中心" class="headerlink" title="服务注册中心"></a>服务注册中心</h2><h3 id="什么服务注册中心"><a href="#什么服务注册中心" class="headerlink" title="什么服务注册中心"></a>什么服务注册中心</h3><p>所谓服务注册中心就是在整个的微服务架构中单独提出一个服务，这个服务不完成系统的任何的业务功能，仅仅用来完成对整个微服务系统的服务注册和服务发现，以及对服务健康状态的监控和管理功能。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114150558.png" alt="image-20200709124952525"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.服务注册中心</span></span><br><span class="line"><span class="bullet">-</span> 可以对所有的微服务的信息进行存储，如微服务的名称、IP、端口等</span><br><span class="line"><span class="bullet">-</span> 可以在进行服务调用时通过服务发现查询可用的微服务列表及网络地址进行服务调用</span><br><span class="line"><span class="bullet">-</span> 可以对所有的微服务进行心跳检测，如发现某实例长时间无法访问，就会从服务注册表移除该实例。</span><br></pre></td></tr></table></figure><h3 id="常用的注册中心"><a href="#常用的注册中心" class="headerlink" title="常用的注册中心"></a>常用的注册中心</h3><p>springcloud支持的多种注册中心Eureka(netflix)、Consul、Zookeeper、以及阿里巴巴推出Nacos组件。这些注册中心在本质上都是用来管理服务的注册和发现以及服务状态的检查的。</p><h4 id="1-Eureka"><a href="#1-Eureka" class="headerlink" title="1.Eureka"></a>1.Eureka</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 0.简介</span></span><br><span class="line"><span class="bullet">-</span> https://github.com/Netflix/eureka/wiki</span><br><span class="line"><span class="bullet">-</span> Eureka是Netflix开发的服务发现框架，本身是一个基于REST的服务。SpringCloud将它集成在其子项目spring-cloud-netflix中，以实现SpringCloud的服务注册和发现功能。</span><br><span class="line"><span class="code">Eureka包含两个组件：Eureka Server和Eureka Client。</span></span><br></pre></td></tr></table></figure><p>单体应用  ——&gt;  分类服务   商品服务  订单服务 用户服务……</p><p>Eureka Server 组件 :  服务注册中心组件    管理所有服务  支持所有服务注册</p><p>Eureka Client 组件 :   分类服务  商品服务  订单服务(微服务)</p><h5 id="开发Eureka-Server"><a href="#开发Eureka-Server" class="headerlink" title="开发Eureka Server"></a>开发Eureka Server</h5><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.创建项目并引入eureka server依赖</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入 eureka server--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114150620.png" alt="image-20200709160918779"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 2.编写配置application.properties</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8761#执行服务端口</span></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">eurekaserver #指定服务名称 唯一标识</span></span><br><span class="line"><span class="meta">eureka.client.service-url.defaultZone</span>=<span class="string">http://localhost:8761/eureka  #指定服务注册中心的地址</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 3.开启Eureka Server,入口类加入注解</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Eurekaserver8761Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Eurekaserver8761Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114150623.png" alt="image-20200709162043210"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 4.访问Eureka的服务注册页面</span></span><br><span class="line"><span class="bullet">-</span> http://localhost:8761</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114150626.png" alt="image-20200709161916871"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 5.虽然能看到管理界面为什么项目启动控制台报错? eureka server 服务注册中心 &amp; client 微服务</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114150632.png" alt="image-20200709162307608"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> 出现上述问题原因:eureka组件包含 eurekaserver 和 eurekaclient。server是一个服务注册中心,用来接受客户端的注册。client的特性会让当前启动的服务把自己作为eureka的客户端进行服务中心的注册,当项目启动时服务注册中心还没有创建好,所以找我不到服务的客户端组件就直接报错了，当启动成功服务注册中心创建好了，日后client也能进行注册，就不再报错啦！</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 6.关闭Eureka自己注册自己</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8761</span></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">eurekaserver</span></span><br><span class="line"><span class="meta">eureka.client.service-url.defaultZone</span>=<span class="string">http://localhost:8761/eureka</span></span><br><span class="line"><span class="meta">eureka.client.register-with-eureka</span>=<span class="string">false    #不再将自己同时作为客户端进行注册  </span></span><br><span class="line"><span class="meta">eureka.client.fetch-registry</span>=<span class="string">false#关闭作为客户端时从eureka server获取服务信息</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114150637.png" alt="image-20200709163511121"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 7.再次启动,当前应用就是一个单纯Eureka Server,控制器也不再报错</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114150641.png" alt="image-20200709163630273"></p><h5 id="开发Eureka-Client"><a href="#开发Eureka-Client" class="headerlink" title="开发Eureka Client"></a>开发Eureka Client</h5><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.创建项目并引入eureka client依赖</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入eureka client--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114150645.png" alt="image-20200709164110003"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 2.编写配置application.properties</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8888#服务端口号</span></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">eurekaclient8888#服务名称唯一标识</span></span><br><span class="line"><span class="meta">eureka.client.service-url.defaultZone</span>=<span class="string">http://localhost:8761/eureka #eureka注册中心地址</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114150650.png" alt="image-20200709164404396"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 3.开启eureka客户端加入注解</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Eurekaclient8888Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Eurekaclient8888Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114150655.png" alt="image-20200709164505482"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 4.启动之前的8761的服务注册中心,在启动eureka客户端服务</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114150659.png" alt="image-20200709164622017"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 5.查看eureka server的服务注册情况</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114150704.png" alt="image-20200709164729870"></p><h5 id="eureka自我保护机制"><a href="#eureka自我保护机制" class="headerlink" title="eureka自我保护机制"></a>eureka自我保护机制</h5><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 0.服务频繁启动时 EurekaServer出现警告</span></span><br><span class="line"><span class="bullet">-</span> EMERGENCY! EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY&#x27;RE NOT. RENEWALS ARE LESSER THAN THRESHOLD AND HENCE THE INSTANCES ARE NOT BEING EXPIRED JUST TO BE SAFE.</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114150711.png" alt="image-20200709171532408"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.自我保护机制</span></span><br><span class="line"><span class="bullet">-</span> 官网地址: https://github.com/Netflix/eureka/wiki/Server-Self-Preservation-Mode</span><br><span class="line"><span class="bullet">-</span> 默认情况下，如果Eureka Server在一定时间内（默认90秒）没有接收到某个微服务实例的心跳，Eureka Server将会移除该实例。但是当网络分区故障发生时，微服务与Eureka Server之间无法正常通信，而微服务本身是正常运行的，此时不应该移除这个微服务，所以引入了自我保护机制。Eureka Server在运行期间会去统计心跳失败比例在 15 分钟之内是否低于 85%，如果低于 85%，Eureka Server 会将这些实例保护起来，让这些实例不会过期。这种设计的哲学原理就是&quot;宁可信其有不可信其无!&quot;。自我保护模式正是一种针对网络异常波动的安全保护措施，使用自我保护模式能使Eureka集群更加的健壮、稳定的运行。</span><br><span class="line"></span><br><span class="line"><span class="section"># 2.在eureka server端关闭自我保护机制</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">eureka.server.enable-self-preservation</span>=<span class="string">false  #关闭自我保护</span></span><br><span class="line"><span class="meta">eureka.server.eviction-interval-timer-in-ms</span>=<span class="string">3000 #超时3s自动清除</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114150720.png" alt="image-20200709231727148"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 3.微服务修改减短服务心跳的时间</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">eureka.instance.lease-expiration-duration-in-seconds</span>=<span class="string">10 #用来修改eureka server默认接受心跳的最大时间 默认是90s</span></span><br><span class="line"><span class="meta">eureka.instance.lease-renewal-interval-in-seconds</span>=<span class="string">5     #指定客户端多久向eureka server发送一次心跳 默认是30s</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 4.尽管如此关闭自我保护机制还是会出现警告</span></span><br><span class="line"><span class="bullet">-</span> THE SELF PRESERVATION MODE IS TURNED OFF. THIS MAY NOT PROTECT INSTANCE EXPIRY IN CASE OF NETWORK/OTHER PROBLEMS.</span><br><span class="line"><span class="bullet">-</span> `官方并不建议在生产情况下关闭</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114150726.png" alt="image-20200709232933894"></p><h5 id="eureka-停止更新"><a href="#eureka-停止更新" class="headerlink" title="eureka 停止更新"></a>eureka 停止更新</h5><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.官方停止更新说明</span></span><br><span class="line"><span class="bullet">-</span> https://github.com/Netflix/eureka/wiki</span><br><span class="line"><span class="bullet">-</span> 在1.x版本项目还是活跃的,但是在2.x版本中停止维护,出现问题后果自负!!!</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114150735.png" alt="image-20200709233215860"></p><p>consul  服务注册中心  启动consul服务注册中心  运行 </p><p>consul 客户端 将springcloud 客户端(微服务)</p><h4 id="2-Consul"><a href="#2-Consul" class="headerlink" title="2.Consul"></a>2.Consul</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 0.consul 简介</span></span><br><span class="line"><span class="bullet">-</span> https://www.consul.io</span><br><span class="line"><span class="bullet">-</span> consul是一个可以提供服务发现，健康检查，多数据中心，Key/Value存储等功能的分布式服务框架，用于实现分布式系统的服务发现与配置。与其他分布式服务注册与发现的方案，使用起来也较为简单。Consul用Golang实现，因此具有天然可移植性(支持Linux、Windows和Mac OS X)；安装包仅包含一个可执行文件，方便部署。</span><br></pre></td></tr></table></figure><h5 id="安装consul"><a href="#安装consul" class="headerlink" title="安装consul"></a>安装consul</h5><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.下载consul</span></span><br><span class="line"><span class="bullet">-</span> https://www.consul.io/downloads</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114150821.png" alt="image-20200710103539186"></p><p><img src= "/img/loading.gif" data-lazy-src="/2021/01/14/springcloud-quan-jia-tong/dowlond\study\MDMDMD\java笔记\springCloud\springCloud全家桶.assets\image-20200710104357091.png" alt="image-20200710104357091"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 2.安装consul</span></span><br><span class="line"><span class="bullet">-</span> 官方安装视频地址: https://learn.hashicorp.com/consul/getting-started/install.html</span><br><span class="line"><span class="bullet">-</span> 1.解压之后发现consul只有一个脚本文件</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114150828.png" alt="image-20200710105007805"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 3.根据解压缩目录配置环境变量</span></span><br><span class="line"><span class="bullet">-</span> 根据安装目录进行环境变量配置 [这里是macos和linux系统配置]</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114150834.png" alt="image-20200710105305439"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 4.查看consul环境变量是否配置成功,执行命令出现如下信息代表成功</span></span><br><span class="line"><span class="bullet">-</span> consul -v</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114150840.png" alt="image-20200710105449741"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 5.启动consul服务</span></span><br><span class="line"><span class="bullet">-</span> consul agent -dev</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114150845.png" alt="image-20200710105654356"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 6.访问consul的web服务端口</span></span><br><span class="line"><span class="bullet">-</span> http://localhost:8500</span><br><span class="line"><span class="code">`consul默认服务端口是8500</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114150851.png" alt="image-20200710105912943"></p><h5 id="开发consul-客户端即微服务"><a href="#开发consul-客户端即微服务" class="headerlink" title="开发consul 客户端即微服务"></a>开发consul 客户端即微服务</h5><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.创建项目并引入consul客户端依赖</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!--引入consul依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114150915.png" alt="image-20200710113855944"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 2.编写properties配置</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8889</span></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">consulclient8889</span></span><br><span class="line"><span class="meta">spring.cloud.consul.host</span>=<span class="string">localhost#注册consul服务的主机</span></span><br><span class="line"><span class="meta">spring.cloud.consul.port</span>=<span class="string">8500#注册consul服务的端口号</span></span><br><span class="line"><span class="meta">spring.cloud.consul.discovery.register-health-check</span>=<span class="string">false    #关闭consu了服务的健康检查[不推荐]</span></span><br><span class="line"><span class="meta">spring.cloud.consul.discovery.service-name</span>=<span class="string">$&#123;spring.application.name&#125; #指定注册的服务名称 默认就是应用名</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114150921.png" alt="image-20200713135437947"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 3.启动服务查看consul界面服务信息</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114150926.png" alt="image-20200713135359150"></p><h5 id="consul-开启健康监控检查"><a href="#consul-开启健康监控检查" class="headerlink" title="consul 开启健康监控检查"></a>consul 开启健康监控检查</h5><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.开启consul健康监控</span></span><br><span class="line"><span class="bullet">-</span> 默认情况加consul监控健康是开启的,但是必须依赖健康监控依赖才能正确监控健康状态所以直接启动会显示错误,引入健康监控依赖之后服务正常</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这个包是用做健康度监控的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114150932.png" alt="image-20200713140146813"></p><h5 id="consul-关闭健康监控检查"><a href="#consul-关闭健康监控检查" class="headerlink" title="consul 关闭健康监控检查"></a>consul 关闭健康监控检查</h5><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8889</span></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">consulclient8889</span></span><br><span class="line"><span class="meta">spring.cloud.consul.host</span>=<span class="string">localhost#注册consul服务的主机</span></span><br><span class="line"><span class="meta">spring.cloud.consul.port</span>=<span class="string">8500#注册consul服务的端口号</span></span><br><span class="line"><span class="meta">spring.cloud.consul.discovery.register-health-check</span>=<span class="string">false    #关闭consu了服务的健康检查[不推荐]</span></span><br><span class="line"><span class="meta">spring.cloud.consul.discovery.service-name</span>=<span class="string">$&#123;spring.application.name&#125; #指定注册的服务名称 默认就是应用名</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114150938.png" alt="image-20200710114321913"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114150942.png" alt="image-20200710121728014"></p><h3 id="不同注册中心区别"><a href="#不同注册中心区别" class="headerlink" title="不同注册中心区别"></a>不同注册中心区别</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.CAP定理     服务注册中心集群 node1   node2  node3    ...   eureka(AP)   consul zk(CP)</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> CAP定理：CAP定理又称CAP原则，指的是在一个分布式系统中，一致性（Consistency）、可用性（Availability）、分区容错性（Partition tolerance）。CAP 原则指的是，这三个要素最多只能同时实现两点，不可能三者兼顾。</span><br><span class="line"><span class="code">`一致性（C）：在分布式系统中的所有数据备份，在同一时刻是否同样的值。（等同于所有节点访问同一份最新的数据副本）</span></span><br><span class="line"><span class="code">`可用性（A）：在集群中一部分节点故障后，集群整体是否还能响应客户端的读写请求。（对数据更新具备高可用性）</span></span><br><span class="line"><span class="code">`分区容忍性（P），就是高可用性，一个节点崩了，并不影响其它的节点（100个节点，挂了几个，不影响服务，越多机器越好）</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 2.Eureka特点  </span></span><br><span class="line"><span class="code">- Eureka中没有使用任何的数据强一致性算法保证不同集群间的Server的数据一致，仅通过数据拷贝的方式争取注册中心数据的最终一致性，虽然放弃数据强一致性但是换来了Server的可用性，降低了注册的代价，提高了集群运行的健壮性。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 3.Consul特点</span></span><br><span class="line"><span class="code">- 基于Raft算法，Consul提供强一致性的注册中心服务，但是由于Leader节点承担了所有的处理工作，势必加大了注册和发现的代价，降低了服务的可用性。通过Gossip协议，Consul可以很好地监控Consul集群的运行，同时可以方便通知各类事件，如Leader选择发生、Server地址变更等。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 4.zookeeper特点</span></span><br><span class="line"><span class="code">- 基于Zab协议，Zookeeper可以用于构建具备数据强一致性的服务注册与发现中心，而与此相对地牺牲了服务的可用性和提高了注册需要的时间。  </span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114150948.png" alt="image-20200710135837525"></p><h2 id="服务间通信方式"><a href="#服务间通信方式" class="headerlink" title="服务间通信方式"></a>服务间通信方式</h2><p>接下来在整个微服务架构中,我们比较关心的就是服务间的服务改如何调用,有哪些调用方式?</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114151108.png" alt="image-20200713095528763"></p><blockquote><p>总结:<code>在springcloud中服务间调用方式主要是使用 http restful方式进行服务间调用</code></p></blockquote><h3 id="基于RestTemplate的服务调用"><a href="#基于RestTemplate的服务调用" class="headerlink" title="基于RestTemplate的服务调用"></a>基于RestTemplate的服务调用</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 0.说明</span></span><br><span class="line"><span class="bullet">-</span> spring框架提供的RestTemplate类可用于在应用中调用rest服务，它简化了与http服务的通信方式，统一了RESTful的标准，封装了http链接， 我们只需要传入url及返回值类型即可。相较于之前常用的HttpClient，RestTemplate是一种更优雅的调用RESTful服务的方式。</span><br></pre></td></tr></table></figure><h4 id="1-RestTemplate-服务调用"><a href="#1-RestTemplate-服务调用" class="headerlink" title="1. RestTemplate 服务调用"></a>1. RestTemplate 服务调用</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.创建两个服务并注册到consul注册中心中</span></span><br><span class="line"><span class="bullet">-</span> users    代表用户服务 端口为 9999</span><br><span class="line"><span class="bullet">-</span> products 代表商品服务 端口为 9998</span><br><span class="line"><span class="code">`注意:这里服务仅仅用来测试,没有实际业务意义</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114151114.png" alt="image-20200713101224125"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114151120.png" alt="image-20200713101422031"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 2.在商品服务中提供服务方法</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/product/findAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;商品服务查询所有调用成功,当前服务端口:[&#123;&#125;]&quot;</span>,port);</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String,Object&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;服务调用成功,服务提供端口为: &quot;</span>+port);</span><br><span class="line">        map.put(<span class="string">&quot;status&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114151126.png" alt="image-20200713101553893"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 3.在用户服务中使用restTemplate进行调用</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114151130.png" alt="image-20200713102053530"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/findAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;调用用户服务...&quot;</span>);</span><br><span class="line">        <span class="comment">//1.使用restTemplate调用商品服务</span></span><br><span class="line">        RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">        String forObject = restTemplate.getForObject(<span class="string">&quot;http://localhost:9998/product/findAll&quot;</span>, </span><br><span class="line">                                                     String.class);</span><br><span class="line">        <span class="keyword">return</span> forObject;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 4.启动服务</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114151137.png" alt="image-20200713102320469"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114151141.png" alt="image-20200713140350189"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 5.测试服务调用</span></span><br><span class="line"><span class="bullet">-</span> 浏览器访问用户服务 http://localhost:9999/user/findAll</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114151146.png" alt="image-20200713102454337"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114151151.png" alt="image-20200713102616311"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 6.总结</span></span><br><span class="line"><span class="bullet">-</span> rest Template是直接基于服务地址调用没有在服务注册中心获取服务,也没有办法完成服务的负载均衡如果需要实现服务的负载均衡需要自己书写服务负载均衡策略。</span><br><span class="line"></span><br><span class="line"><span class="section"># 7.restTemplate直接调用存在问题</span></span><br><span class="line"><span class="bullet">-</span>  1.直接使用restTemplate方式调用没有经过服务注册中心获取服务地址,代码写死不利于维护,当服务宕机时不能高效剔除</span><br><span class="line"><span class="bullet">-</span>  2.调用服务时没有负载均衡需要自己实现负载均衡策略</span><br></pre></td></tr></table></figure><h3 id="基于Ribbon的服务调用"><a href="#基于Ribbon的服务调用" class="headerlink" title="基于Ribbon的服务调用"></a>基于Ribbon的服务调用</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 0.说明</span></span><br><span class="line"><span class="bullet">-</span> 官方网址: https://github.com/Netflix/ribbon</span><br><span class="line"><span class="bullet">-</span> Spring Cloud Ribbon是一个基于HTTP和TCP的客户端负载均衡工具，它基于Netflix Ribbon实现。通过Spring Cloud的封装，可以让我们轻松地将面向服务的REST模版请求自动转换成客户端负载均衡的服务调用。</span><br></pre></td></tr></table></figure><h4 id="1-Ribbon-服务调用"><a href="#1-Ribbon-服务调用" class="headerlink" title="1.Ribbon 服务调用"></a>1.Ribbon 服务调用</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.项目中引入依赖</span></span><br><span class="line"><span class="bullet">-</span> 说明: </span><br><span class="line"><span class="code">1.如果使用的是eureka client 和 consul client,无须引入依赖,因为在eureka,consul中默认集成了ribbon组件</span></span><br><span class="line"><span class="code">2.如果使用的client中没有ribbon依赖需要显式引入如下依赖</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入ribbon依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 2.查看consul client中依赖的ribbon</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114151159.png" alt="image-20200713140804414"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 3.使用restTemplate + ribbon进行服务调用</span></span><br><span class="line"><span class="bullet">-</span> 使用discovery client  进行客户端调用</span><br><span class="line"><span class="bullet">-</span> 使用loadBalanceClient 进行客户端调用</span><br><span class="line"><span class="bullet">-</span> 使用@loadBalanced     进行客户端调用</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 3.1 使用discovery Client形式调用</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取服务列表</span></span><br><span class="line">List&lt;ServiceInstance&gt; products = discoveryClient.getInstances(<span class="string">&quot;服务ID&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (ServiceInstance product : products) &#123;</span><br><span class="line">  log.info(<span class="string">&quot;服务主机:[&#123;&#125;]&quot;</span>,product.getHost());</span><br><span class="line">  log.info(<span class="string">&quot;服务端口:[&#123;&#125;]&quot;</span>,product.getPort());</span><br><span class="line">  log.info(<span class="string">&quot;服务地址:[&#123;&#125;]&quot;</span>,product.getUri());</span><br><span class="line">  log.info(<span class="string">&quot;====================================&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 3.2 使用loadBalance Client形式调用</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> LoadBalancerClient loadBalancerClient;</span><br><span class="line"><span class="comment">//根据负载均衡策略选取某一个服务调用</span></span><br><span class="line">ServiceInstance product = loadBalancerClient.choose(<span class="string">&quot;服务ID&quot;</span>);<span class="comment">//地址  轮询策略</span></span><br><span class="line">log.info(<span class="string">&quot;服务主机:[&#123;&#125;]&quot;</span>,product.getHost());</span><br><span class="line">log.info(<span class="string">&quot;服务端口:[&#123;&#125;]&quot;</span>,product.getPort());</span><br><span class="line">log.info(<span class="string">&quot;服务地址:[&#123;&#125;]&quot;</span>,product.getUri());</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 3.3 使用@loadBalanced</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.整合restTemplate + ribbon</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@LoadBalanced</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.调用服务位置注入RestTemplate</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"><span class="comment">//3.调用</span></span><br><span class="line">String forObject = restTemplate.getForObject(<span class="string">&quot;http://服务ID/hello/hello?name=&quot;</span> + name, String.class);</span><br></pre></td></tr></table></figure><h4 id="2-Ribbon负载均衡策略"><a href="#2-Ribbon负载均衡策略" class="headerlink" title="2.Ribbon负载均衡策略"></a>2.Ribbon负载均衡策略</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.ribbon负载均衡算法</span></span><br><span class="line"><span class="bullet">-</span> RoundRobinRule         轮训策略按顺序循环选择 Server </span><br><span class="line"><span class="bullet">-</span> RandomRule             随机策略随机选择 Server  </span><br><span class="line"><span class="bullet">-</span> AvailabilityFilteringRule 可用过滤策略</span><br><span class="line"> `会先过滤由于多次访问故障而处于断路器跳闸状态的服务，还有并发的连接数量超过阈值的服务，然后对剩余的服务列表按照轮询策略进行访问</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> WeightedResponseTimeRule  响应时间加权策略   </span><br><span class="line"><span class="code">`根据平均响应的时间计算所有服务的权重，响应时间越快服务权重越大被选中的概率越高，刚启动时如果统计信息不足，则使用</span></span><br><span class="line"><span class="code">RoundRobinRule策略，等统计信息足够会切换到</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">- RetryRule                 重试策略          </span></span><br><span class="line"><span class="code">`先按照RoundRobinRule的策略获取服务，如果获取失败则在制定时间内进行重试，获取可用的服务。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">- BestAviableRule           最低并发策略     </span></span><br><span class="line"><span class="code">`会先过滤掉由于多次访问故障而处于断路器跳闸状态的服务，然后选择一个并发量最小的服务</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114151210.png" alt="image-20200713162940968"></p><h4 id="3-修改服务的默认负载均衡策略"><a href="#3-修改服务的默认负载均衡策略" class="headerlink" title="3.修改服务的默认负载均衡策略"></a>3.修改服务的默认负载均衡策略</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.修改服务默认随机策略</span></span><br><span class="line"><span class="bullet">-</span> 服务id.ribbon.NFLoadBalancerRuleClassName=com.netflix.loadbalancer.RandomRule</span><br><span class="line"><span class="code">`下面的products为服务的唯一标识</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">products.ribbon.NFLoadBalancerRuleClassName</span>=<span class="string">com.netflix.loadbalancer.RandomRule</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114151216.png" alt="image-20200713163722927"></p><h4 id="4-Ribbon停止维护"><a href="#4-Ribbon停止维护" class="headerlink" title="4.Ribbon停止维护"></a>4.Ribbon停止维护</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.官方停止维护说明</span></span><br><span class="line"><span class="bullet">-</span> https://github.com/Netflix/ribbon</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114151221.png" alt="image-20200713195706787"></p><hr><h2 id="OpenFeign组件的使用"><a href="#OpenFeign组件的使用" class="headerlink" title="OpenFeign组件的使用"></a>OpenFeign组件的使用</h2><ul><li>思考: 使用RestTemplate+ribbon已经可以完成服务间的调用，为什么还要使用feign？</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String restTemplateForObject = restTemplate.getForObject(<span class="string">&quot;http://服务名/url?参数&quot;</span> + name, String.class);</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 存在问题:</span></span><br><span class="line"><span class="bullet">-</span> 1.每次调用服务都需要写这些代码,存在大量的代码冗余</span><br><span class="line"><span class="bullet">-</span> 2.服务地址如果修改,维护成本增高</span><br><span class="line"><span class="bullet">-</span> 3.使用时不够灵活</span><br></pre></td></tr></table></figure><h3 id="OpenFeign-组件"><a href="#OpenFeign-组件" class="headerlink" title="OpenFeign 组件"></a>OpenFeign 组件</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 0.说明</span></span><br><span class="line"><span class="bullet">-</span> https://cloud.spring.io/spring-cloud-openfeign/reference/html/</span><br><span class="line"><span class="bullet">-</span> Feign是一个声明式的伪Http客户端，它使得写Http客户端变得更简单。使用Feign，只需要创建一个接口并注解。它具有可插拔的注解特性(可以使用springmvc的注解)，可使用Feign 注解和JAX-RS注解。Feign支持可插拔的编码器和解码器。Feign默认集成了Ribbon，默认实现了负载均衡的效果并且springcloud为feign添加了springmvc注解的支持。</span><br></pre></td></tr></table></figure><h4 id="1-openFeign-服务调用"><a href="#1-openFeign-服务调用" class="headerlink" title="1.openFeign 服务调用"></a>1.openFeign 服务调用</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.服务调用方法引入依赖OpenFeign依赖</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Open Feign依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114151230.png" alt="image-20200713201342374"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 2.入口类加入注解开启OpenFeign支持</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span>   <span class="comment">//开启openfeign支持</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Users9999Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Users9999Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114151234.png" alt="image-20200713201602139"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 3.创建一个客户端调用接口</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//value属性用来指定:调用服务名称</span></span><br><span class="line"><span class="meta">@FeignClient(&quot;PRODUCTS&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductClient</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/product/findAll&quot;)</span> <span class="comment">//书写服务调用路径</span></span><br><span class="line">    <span class="function">String <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114151238.png" alt="image-20200713202133954"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 4.使用feignClient客户端对象调用服务</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注入客户端对象</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ProductClient productClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/user/findAllFeignClient&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">findAllFeignClient</span><span class="params">()</span></span>&#123;</span><br><span class="line">  log.info(<span class="string">&quot;通过使用OpenFeign组件调用商品服务...&quot;</span>);</span><br><span class="line">  String msg = productClient.findAll();</span><br><span class="line">  <span class="keyword">return</span> msg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114151242.png" alt="image-20200713202615159"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 5.访问并测试服务</span></span><br><span class="line"><span class="bullet">-</span> http://localhost:9999/user/findAllFeignClient</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114151249.png" alt="image-20200713202802056"></p><h4 id="2-调用服务并传参"><a href="#2-调用服务并传参" class="headerlink" title="2.调用服务并传参"></a>2.调用服务并传参</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 0.说明</span></span><br><span class="line"><span class="bullet">-</span> 服务和服务之间通信,不仅仅是调用,往往在调用过程中还伴随着参数传递,接下来重点来看看OpenFeign在调用服务时如何传递参数</span><br></pre></td></tr></table></figure><h6 id="GET方式调用服务传递参数"><a href="#GET方式调用服务传递参数" class="headerlink" title="GET方式调用服务传递参数"></a>GET方式调用服务传递参数</h6><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.GET方式调用服务传递参数</span></span><br><span class="line"><span class="bullet">-</span> 在商品服务中加入需要传递参数的服务方法来进行测试</span><br><span class="line"><span class="bullet">-</span> 在用户服务中进行调用商品服务中需要传递参数的服务方法进行测试</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.商品服务中添加如下方法</span></span><br><span class="line"> <span class="meta">@GetMapping(&quot;/product/findOne&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">findOne</span><span class="params">(String productId)</span></span>&#123;</span><br><span class="line">  log.info(<span class="string">&quot;商品服务查询商品信息调用成功,当前服务端口:[&#123;&#125;]&quot;</span>,port);</span><br><span class="line">  log.info(<span class="string">&quot;当前接收商品信息的id:[&#123;&#125;]&quot;</span>,productId);</span><br><span class="line">  Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String,Object&gt;();</span><br><span class="line">  map.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;商品服务查询商品信息调用成功,当前服务端口: &quot;</span>+port);</span><br><span class="line">  map.put(<span class="string">&quot;status&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">  map.put(<span class="string">&quot;productId&quot;</span>,productId);</span><br><span class="line">  <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114151254.png" alt="image-20200713203833730"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2.用户服务中在product客户端中声明方法</span></span><br><span class="line"><span class="meta">@FeignClient(&quot;PRODUCTS&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductClient</span> </span>&#123; </span><br><span class="line"><span class="meta">@GetMapping(&quot;/product/findOne&quot;)</span></span><br><span class="line"> <span class="function">String <span class="title">findOne</span><span class="params">(<span class="meta">@RequestParam(&quot;productId&quot;)</span> String productId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114151304.png" alt="image-20200713204301830"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//3.用户服务中调用并传递参数</span></span><br><span class="line"><span class="comment">//注入客户端对象</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ProductClient productClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/feign/test1&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">test1</span><span class="params">(String id)</span></span>&#123;</span><br><span class="line">  log.info(<span class="string">&quot;用来测试Openfiegn的GET方式参数传递&quot;</span>);</span><br><span class="line">  Map&lt;String, Object&gt; msg = productClient.findOne(id);</span><br><span class="line">  log.info(<span class="string">&quot;调用返回信息:[&#123;&#125;]&quot;</span>,msg);</span><br><span class="line">  <span class="keyword">return</span> msg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114151308.png" alt="image-20200728173210751"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 测试访问</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114151312.png" alt="image-20200713204827577"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114151317.png" alt="image-20200713204851383"></p><h6 id="post方式调用服务传递参数"><a href="#post方式调用服务传递参数" class="headerlink" title="post方式调用服务传递参数"></a>post方式调用服务传递参数</h6><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 2.post方式调用服务传递参数</span></span><br><span class="line"><span class="bullet">-</span> 在商品服务中加入需要传递参数的服务方法来进行测试</span><br><span class="line"><span class="bullet">-</span> 在用户服务中进行调用商品服务中需要传递参数的服务方法进行测试</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.商品服务加入post方式请求并接受name</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/product/save&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">save</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">  log.info(<span class="string">&quot;商品服务保存商品调用成功,当前服务端口:[&#123;&#125;]&quot;</span>,port);</span><br><span class="line">  log.info(<span class="string">&quot;当前接收商品名称:[&#123;&#125;]&quot;</span>,name);</span><br><span class="line">  Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String,Object&gt;();</span><br><span class="line">  map.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;商品服务查询商品信息调用成功,当前服务端口: &quot;</span>+port);</span><br><span class="line">  map.put(<span class="string">&quot;status&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">  map.put(<span class="string">&quot;name&quot;</span>,name);</span><br><span class="line">  <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114151322.png" alt="image-20200713205125242"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2.用户服务中在product客户端中声明方法</span></span><br><span class="line"><span class="comment">//value属性用来指定:调用服务名称</span></span><br><span class="line"><span class="meta">@FeignClient(&quot;PRODUCTS&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/product/save&quot;)</span></span><br><span class="line">    <span class="function">String <span class="title">save</span><span class="params">(<span class="meta">@RequestParam(&quot;name&quot;)</span> String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114151327.png" alt="image-20200713205734920"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//3.用户服务中调用并传递参数</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ProductClient productClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/user/save&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">(String productName)</span></span>&#123;</span><br><span class="line">  log.info(<span class="string">&quot;接收到的商品信息名称:[&#123;&#125;]&quot;</span>,productName);</span><br><span class="line">  String save = productClient.save(productName);</span><br><span class="line">  log.info(<span class="string">&quot;调用成功返回结果: &quot;</span>+save);</span><br><span class="line">  <span class="keyword">return</span> save;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114151330.png" alt="image-20200713205823467"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 测试访问</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114151334.png" alt="image-20200713205919054"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114151338.png" alt="image-20200713210001477"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 2.传递对象类型参数</span></span><br><span class="line"><span class="bullet">-</span> 商品服务定义对象</span><br><span class="line"><span class="bullet">-</span> 商品服务定义对象接收方法</span><br><span class="line"><span class="bullet">-</span> 用户服务调用商品服务定义对象参数方法进行参数传递</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.商品服务定义对象</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Date bir;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114151344.png" alt="image-20200713210437488"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2.商品服务定义接收对象的方法</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/product/saveProduct&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">saveProduct</span><span class="params">(<span class="meta">@RequestBody</span> Product product)</span></span>&#123;</span><br><span class="line">  log.info(<span class="string">&quot;商品服务保存商品信息调用成功,当前服务端口:[&#123;&#125;]&quot;</span>,port);</span><br><span class="line">  log.info(<span class="string">&quot;当前接收商品名称:[&#123;&#125;]&quot;</span>,product);</span><br><span class="line">  Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String,Object&gt;();</span><br><span class="line">  map.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;商品服务查询商品信息调用成功,当前服务端口: &quot;</span>+port);</span><br><span class="line">  map.put(<span class="string">&quot;status&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">  map.put(<span class="string">&quot;product&quot;</span>,product);</span><br><span class="line">  <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114151351.png" alt="image-20200713210641668"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//3.将商品对象复制到用户服务中</span></span><br><span class="line"><span class="comment">//4.用户服务中在product客户端中声明方法</span></span><br><span class="line"><span class="meta">@FeignClient(&quot;PRODUCTS&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductClient</span> </span>&#123;</span><br><span class="line">  <span class="meta">@PostMapping(&quot;/product/saveProduct&quot;)</span></span><br><span class="line">  <span class="function">String <span class="title">saveProduct</span><span class="params">(<span class="meta">@RequestBody</span> Product product)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注意:服务提供方和调用方一定要加入@RequestBody注解 </span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114151357.png" alt="image-20200713211213241"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 5.在用户服务中调用保存商品信息服务</span></span><br><span class="line"><span class="comment">//注入客户端对象</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ProductClient productClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/user/saveProduct&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">saveProduct</span><span class="params">(Product product)</span></span>&#123;</span><br><span class="line">  log.info(<span class="string">&quot;接收到的商品信息:[&#123;&#125;]&quot;</span>,product);</span><br><span class="line">  String save = productClient.saveProduct(product);</span><br><span class="line">  log.info(<span class="string">&quot;调用成功返回结果: &quot;</span>+save);</span><br><span class="line">  <span class="keyword">return</span> save;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114151402.png" alt="image-20200713211308524"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 测试</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114151408.png" alt="image-20200713211338475"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114151415.png" alt="image-20200713211402844"></p><h4 id="3-OpenFeign超时设置"><a href="#3-OpenFeign超时设置" class="headerlink" title="3.OpenFeign超时设置"></a>3.OpenFeign超时设置</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 0.超时说明</span></span><br><span class="line"><span class="bullet">-</span> 默认情况下,openFiegn在进行服务调用时,要求服务提供方处理业务逻辑时间必须在1S内返回,如果超过1S没有返回则OpenFeign会直接报错,不会等待服务执行,但是往往在处理复杂业务逻辑是可能会超过1S,因此需要修改OpenFeign的默认服务调用超时时间。</span><br><span class="line"><span class="bullet">-</span> 调用超时会出现如下错误：</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.模拟超时</span></span><br><span class="line"><span class="bullet">-</span> 服务提供方加入线程等待阻塞</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114151418.png" alt="image-20200713213322984"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 2.进行客户端调用</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114151422.png" alt="image-20200713213415230"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 3.修改OpenFeign默认超时时间</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">feign.client.config.PRODUCTS.connectTimeout</span>=<span class="string">5000  #配置指定服务连接超时</span></span><br><span class="line"><span class="meta">feign.client.config.PRODUCTS.readTimeout</span>=<span class="string">5000  #配置指定服务等待超时</span></span><br><span class="line"><span class="comment">#feign.client.config.default.connectTimeout=5000  #配置所有服务连接超时</span></span><br><span class="line"><span class="comment">#feign.client.config.default.readTimeout=5000#配置所有服务等待超时</span></span><br></pre></td></tr></table></figure><h4 id="4-OpenFeign调用详细日志展示"><a href="#4-OpenFeign调用详细日志展示" class="headerlink" title="4.OpenFeign调用详细日志展示"></a>4.OpenFeign调用详细日志展示</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 0.说明</span></span><br><span class="line"><span class="bullet">-</span> 往往在服务调用时我们需要详细展示feign的日志,默认feign在调用是并不是最详细日志输出,因此在调试程序时应该开启feign的详细日志展示。feign对日志的处理非常灵活可为每个feign客户端指定日志记录策略，每个客户端都会创建一个logger默认情况下logger的名称是feign的全限定名需要注意的是，feign日志的打印只会DEBUG级别做出响应。</span><br><span class="line"><span class="bullet">-</span> 我们可以为feign客户端配置各自的logger.level对象，告诉feign记录那些日志logger.lever有以下的几种值</span><br><span class="line"><span class="code">`NONE  不记录任何日志</span></span><br><span class="line"><span class="code">`BASIC 仅仅记录请求方法，url，响应状态代码及执行时间</span></span><br><span class="line"><span class="code">`HEADERS 记录Basic级别的基础上，记录请求和响应的header</span></span><br><span class="line"><span class="code">`FULL 记录请求和响应的header，body和元数据</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.开启日志展示</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">feign.client.config.PRODUCTS.loggerLevel</span>=<span class="string">full  #开启指定服务日志展示</span></span><br><span class="line"><span class="comment">#feign.client.config.default.loggerLevel=full  #全局开启服务日志展示</span></span><br><span class="line"><span class="meta">logging.level.com.baizhi.feignclients</span>=<span class="string">debug    #指定feign调用客户端对象所在包,必须是debug级别</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 2.测试服务调用查看日志</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114151429.png" alt="image-20200713215108861"></p><h2 id="Hystrix组件使用"><a href="#Hystrix组件使用" class="headerlink" title="Hystrix组件使用"></a>Hystrix组件使用</h2><h3 id="Hystrix组件"><a href="#Hystrix组件" class="headerlink" title="Hystrix组件"></a>Hystrix组件</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114151510.png" alt="image-20200715123359665"></p><p>In a distributed environment, inevitably some of the many service dependencies will fail. Hystrix is a library that helps you control the interactions between these distributed services by adding latency tolerance and fault tolerance logic. Hystrix does this by isolating points of access between the services, stopping cascading failures across them, and providing fallback options, all of which improve your system’s overall resiliency.                                                        –[摘自官方]</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 0.说明</span></span><br><span class="line"><span class="bullet">-</span> https://github.com/Netflix/Hystrix</span><br><span class="line"><span class="bullet">-</span> 译: 在分布式环境中，许多服务依赖项不可避免地会失败。Hystrix是一个库，它通过添加延迟容忍和容错逻辑来帮助您控制这些分布式服务之间的交互。Hystrix通过隔离服务之间的访问点、停止它们之间的级联故障以及提供后备选项来实现这一点，所有这些都可以提高系统的整体弹性。</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 通俗定义: Hystrix是一个用于处理分布式系统的延迟和容错的开源库，在分布式系统中，许多依赖不可避免的会调用失败，超时、异常等，Hystrix能够保证在一个依赖出问题的情况下，不会导致整体服务失败，避免级联故障(服务雪崩现象)，提高分布式系统的弹性。</span><br></pre></td></tr></table></figure><h4 id="1-服务雪崩"><a href="#1-服务雪崩" class="headerlink" title="1.服务雪崩"></a>1.服务雪崩</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.服务雪崩</span></span><br><span class="line"><span class="bullet">-</span> 在微服务之间进行服务调用是由于某一个服务故障，导致级联服务故障的现象，称为雪崩效应。雪崩效应描述的是提供方不可用，导致消费方不可用并将不可用逐渐放大的过程。</span><br><span class="line"><span class="section"># 2.图解雪崩效应</span></span><br><span class="line"><span class="bullet">-</span> 如存在如下调用链路:</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114151516.png" alt="image-20200715151728240"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> 而此时，Service A的流量波动很大，流量经常会突然性增加！那么在这种情况下，就算Service A能扛得住请求，Service B和Service C未必能扛得住这突发的请求。此时，如果Service C因为抗不住请求，变得不可用。那么Service B的请求也会阻塞，慢慢耗尽Service B的线程资源，Service B就会变得不可用。紧接着，Service A也会不可用，这一过程如下图所示</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114151523.png" alt="image-20200715152623313"></p><h4 id="2-服务熔断"><a href="#2-服务熔断" class="headerlink" title="2.服务熔断"></a>2.服务熔断</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 服务熔断</span></span><br><span class="line"><span class="bullet">-</span> “熔断器”本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控，某个异常条件被触发，直接熔断整个服务。向调用方法返回一个符合预期的、可处理的备选响应(FallBack),而不是长时间的等待或者抛出调用方法无法处理的异常，就保证了服务调用方的线程不会被长时间占用，避免故障在分布式系统中蔓延，乃至雪崩。如果目标服务情况好转则恢复调用。服务熔断是解决服务雪崩的重要手段。</span><br><span class="line"></span><br><span class="line"><span class="section"># 服务熔断图示</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114151528.png" alt="image-20200717085946385"></p><h4 id="3-服务降级"><a href="#3-服务降级" class="headerlink" title="3.服务降级"></a>3.服务降级</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 服务降级说明</span></span><br><span class="line"><span class="bullet">-</span> 服务压力剧增的时候根据当前的业务情况及流量对一些服务和页面有策略的降级，以此环节服务器的压力，以保证核心任务的进行。同时保证部分甚至大部分任务客户能得到正确的相应。也就是当前的请求处理不了了或者出错了，给一个默认的返回。</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span>  通俗: 关闭系统中边缘服务 保证系统核心服务的正常运行  称之为服务降级</span><br><span class="line">   //12  淘宝 删除地址  确认收货  删除订单   取消支付   节省cpu  内存</span><br><span class="line"><span class="section"># 服务降级图示</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114151533.png" alt="image-20200717112327729"></p><h4 id="4-降级和熔断总结"><a href="#4-降级和熔断总结" class="headerlink" title="4.降级和熔断总结"></a>4.降级和熔断总结</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.共同点</span></span><br><span class="line"><span class="bullet">-</span> 目的很一致，都是从可用性可靠性着想，为防止系统的整体缓慢甚至崩溃，采用的技术手段；</span><br><span class="line"><span class="bullet">-</span> 最终表现类似，对于两者来说，最终让用户体验到的是某些功能暂时不可达或不可用；</span><br><span class="line"><span class="bullet">-</span> 粒度一般都是服务级别，当然，业界也有不少更细粒度的做法，比如做到数据持久层（允许查询，不允许增删改）；</span><br><span class="line"><span class="bullet">-</span> 自治性要求很高，熔断模式一般都是服务基于策略的自动触发，降级虽说可人工干预，但在微服务架构下，完全靠人显然不可能，开关预置、配置中心都是必要手段；</span><br><span class="line"></span><br><span class="line"><span class="section"># 2.异同点</span></span><br><span class="line"><span class="bullet">-</span> 触发原因不太一样，服务熔断一般是某个服务（下游服务）故障引起，而服务降级一般是从整体负荷考虑；</span><br><span class="line"><span class="bullet">-</span> 管理目标的层次不太一样，熔断其实是一个框架级的处理，每个微服务都需要（无层级之分），而降级一般需要对业务有层级之分（比如降级一般是从最外围服务开始）</span><br><span class="line"></span><br><span class="line"><span class="section"># 3.总结</span></span><br><span class="line"><span class="bullet">-</span> 熔断必会触发降级,所以熔断也是降级一种,区别在于熔断是对调用链路的保护,而降级是对系统过载的一种保护处理</span><br></pre></td></tr></table></figure><h4 id="5-服务熔断的实现"><a href="#5-服务熔断的实现" class="headerlink" title="5.服务熔断的实现"></a>5.服务熔断的实现</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">#服务熔断的实现思路</span></span><br><span class="line"><span class="bullet">-</span> 引入hystrix依赖,并开启熔断器(断路器)</span><br><span class="line"><span class="bullet">-</span> 模拟降级方法</span><br><span class="line"><span class="bullet">-</span> 进行调用测试</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.项目中引入hystrix依赖</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入hystrix--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114151540.png" alt="image-20200716090932981"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 2.开启断路器</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span>  <span class="comment">//用来开启断路器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Products9998Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Products9998Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114151543.png" alt="image-20200716094200460"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 3.使用HystrixCommand注解实现断路</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//服务熔断</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/product/break&quot;)</span></span><br><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;testBreakFall&quot; )</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testBreak</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">  log.info(<span class="string">&quot;接收的商品id为: &quot;</span>+ id);</span><br><span class="line">  <span class="keyword">if</span>(id&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;数据不合法!!!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;当前接收商品id: &quot;</span>+id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testBreakFall</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;当前数据不合法: &quot;</span>+id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114151548.png" alt="image-20200717090743474"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 4.访问测试</span></span><br><span class="line"><span class="bullet">-</span> 正常参数访问</span><br><span class="line"><span class="bullet">-</span> 错误参数访问</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114151554.png" alt="image-20200717090841831"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114151557.png" alt="image-20200717091028876"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 5.总结</span></span><br><span class="line"><span class="bullet">-</span> 从上面演示过程中会发现如果触发一定条件断路器会自动打开,过了一点时间正常之后又会关闭。那么断路器打开条件是什么呢？</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 6.断路器打开条件</span></span><br><span class="line"><span class="bullet">-</span> 官网: https://cloud.spring.io/spring-cloud-netflix/2.2.x/reference/html/#circuit-breaker-spring-cloud-circuit-breaker-with-hystrix</span><br></pre></td></tr></table></figure><p>A service failure in the lower level of services can cause cascading failure all the way up to the user. When calls to a particular service exceed <code>circuitBreaker.requestVolumeThreshold</code> (default: 20 requests) and the failure percentage is greater than <code>circuitBreaker.errorThresholdPercentage</code> (default: &gt;50%) in a rolling window defined by <code>metrics.rollingStats.timeInMilliseconds</code> (default: 10 seconds), the circuit opens and the call is not made. In cases of error and an open circuit, a fallback can be provided by the developer.                                                                        –摘自官方</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 原文翻译之后,总结打开关闭的条件:</span></span><br><span class="line"><span class="bullet">-</span> 1、  当满足一定的阀值的时候（默认10秒内超过20个请求次数）</span><br><span class="line"><span class="bullet">-</span> 2、  当失败率达到一定的时候（默认10秒内超过50%的请求失败）</span><br><span class="line"><span class="bullet">-</span> 3、  到达以上阀值，断路器将会开启</span><br><span class="line"><span class="bullet">-</span> 4、  当开启的时候，所有请求都不会进行转发</span><br><span class="line"><span class="bullet">-</span> 5、  一段时间之后（默认是5秒），这个时候断路器是半开状态，会让其中一个请求进行转发。如果成功，断路器会关闭，若失败，继续开启。重复4和5。</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114151605.png" alt="image-20200717092819616"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 7.默认的服务FallBack处理方法</span></span><br><span class="line"><span class="bullet">-</span> 如果为每一个服务方法开发一个降级,对于我们来说,可能会出现大量的代码的冗余,不利于维护,这个时候就需要加入默认服务降级处理方法</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/product/hystrix&quot;)</span></span><br><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;testHystrixFallBack&quot;)</span> <span class="comment">//通过HystrixCommand降级处理 指定出错的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testHystrix</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">  log.info(<span class="string">&quot;接收名称为: &quot;</span> + name);</span><br><span class="line">  <span class="keyword">int</span> n = <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;服务[&quot;</span> + port + <span class="string">&quot;]响应成功,当前接收名称为:&quot;</span> + name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//服务降级处理</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testHystrixFallBack</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> port + <span class="string">&quot;当前服务已经被降级处理!!!,接收名称为: &quot;</span>+name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114151610.png" alt="image-20200716095016332"></p><h4 id="6-服务降级的实现"><a href="#6-服务降级的实现" class="headerlink" title="6.服务降级的实现"></a>6.服务降级的实现</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.客户端openfeign + hystrix实现服务降级实现</span></span><br><span class="line"><span class="bullet">-</span> 引入hystrix依赖</span><br><span class="line"><span class="bullet">-</span> 配置文件开启feign支持hystrix</span><br><span class="line"><span class="bullet">-</span> 在feign客户端调用加入fallback指定降级处理</span><br><span class="line"><span class="bullet">-</span> 开发降级处理方法</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 2.开启openfeign支持服务降级</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">feign.hystrix.enabled</span>=<span class="string">true #开启openfeign支持降级</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 3.在openfeign客户端中加如Hystrix</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;PRODUCTS&quot;,fallback = ProductFallBack.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/product/hystrix&quot;)</span></span><br><span class="line">    <span class="function">String <span class="title">testHystrix</span><span class="params">(<span class="meta">@RequestParam(&quot;name&quot;)</span> String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114151616.png" alt="image-20200716101101091"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 4.开发fallback处理类</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductFallBack</span> <span class="keyword">implements</span> <span class="title">ProductClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testHystrix</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我是客户端的Hystrix服务实现!!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114151621.png" alt="image-20200717101921108"></p><p><strong>注意:如果服务端降级和客户端降级同时开启,要求服务端降级方法的返回值必须与客户端方法降级的返回值一致!!!</strong></p><h4 id="7-Hystrix-Dashboard"><a href="#7-Hystrix-Dashboard" class="headerlink" title="7.Hystrix Dashboard"></a>7.Hystrix Dashboard</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 0.说明</span></span><br><span class="line"><span class="bullet">-</span> Hystrix Dashboard的一个主要优点是它收集了关于每个HystrixCommand的一组度量。Hystrix仪表板以高效的方式显示每个断路器的运行状况。</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114151625.png" alt="image-20200716161556743"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.项目中引入依赖</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入hystrix dashboard 依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 2.入口类中开启hystrix dashboard</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableHystrixDashboard</span> <span class="comment">//开启监控面板</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hystrixdashboard9990Application</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(Hystrixdashboard9990Application.class, args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114151631.png" alt="image-20200717154912206"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 3.启动hystrix dashboard应用</span></span><br><span class="line"><span class="bullet">-</span> http://localhost:9990(dashboard端口)/hystrix</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114151635.png" alt="image-20200717155059512"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 4.监控的项目中入口类中加入监控路径配置[新版本坑],并启动监控项目</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">getServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  HystrixMetricsStreamServlet streamServlet = <span class="keyword">new</span> HystrixMetricsStreamServlet();</span><br><span class="line">  ServletRegistrationBean registrationBean = <span class="keyword">new</span> ServletRegistrationBean(streamServlet);</span><br><span class="line">  registrationBean.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">  registrationBean.addUrlMappings(<span class="string">&quot;/hystrix.stream&quot;</span>);</span><br><span class="line">  registrationBean.setName(<span class="string">&quot;HystrixMetricsStreamServlet&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> registrationBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114151642.png" alt="image-20200717155120335"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 5.通过监控界面监控</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114151646.png" alt="image-20200717155258994"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 6.点击监控,一致loading,打开控制台发现报错[特别坑]</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114151652.png" alt="image-20200717155555786"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 解决方案</span></span><br><span class="line"><span class="bullet">-</span> 新版本中springcloud将jquery版本升级为3.4.1，定位到monitor.ftlh文件中，js的写法如下：</span><br><span class="line"><span class="code">$(window).load(function() </span></span><br><span class="line"><span class="code">- jquery 3.4.1已经废弃上面写法</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">- 修改方案 修改monitor.ftlh为如下调用方式：</span></span><br><span class="line"><span class="code">$(window).on(&quot;load&quot;,function()</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">- 编译jar源文件，重新打包引入后，界面正常响应。</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114151708.png" alt="image-20200717160636218"></p><h4 id="8-Hystrix停止维护"><a href="#8-Hystrix停止维护" class="headerlink" title="8.Hystrix停止维护"></a>8.Hystrix停止维护</h4><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114151715.png" alt="image-20200717161223806"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114151724.png" alt="image-20200717161400285"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 官方地址:https://github.com/Netflix/Hystrix</span></span><br><span class="line"><span class="bullet">-</span> 翻译:Hystrix（版本1.5.18）足够稳定，可以满足Netflix对我们现有应用的需求。同时，我们的重点已经转移到对应用程序的实时性能作出反应的更具适应性的实现，而不是预先配置的设置（例如，通过自适应并发限制）。对于像Hystrix这样的东西有意义的情况，我们打算继续在现有的应用程序中使用Hystrix，并在新的内部项目中利用诸如resilience4j这样的开放和活跃的项目。我们开始建议其他人也这样做。</span><br><span class="line"><span class="bullet">-</span> Dashboard也被废弃</span><br></pre></td></tr></table></figure><h2 id="Gateway组件使用"><a href="#Gateway组件使用" class="headerlink" title="Gateway组件使用"></a>Gateway组件使用</h2><h3 id="什么是服务网关"><a href="#什么是服务网关" class="headerlink" title="什么是服务网关"></a>什么是服务网关</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.说明</span></span><br><span class="line"><span class="bullet">-</span> 网关统一服务入口，可方便实现对平台众多服务接口进行管控，对访问服务的身份认证、防报文重放与防数据篡改、功能调用的业务鉴权、响应数据的脱敏、流量与并发控制，甚至基于API调用的计量或者计费等等。</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 网关 =  路由转发 + 过滤器</span><br><span class="line"><span class="code">`路由转发：接收一切外界请求，转发到后端的微服务上去；</span></span><br><span class="line"><span class="code">`在服务网关中可以完成一系列的横切功能，例如权限校验、限流以及监控等，这些都可以通过过滤器完成</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 2.为什么需要网关</span></span><br><span class="line"><span class="code"> - 1.网关可以实现服务的统一管理</span></span><br><span class="line"><span class="code"> - 2.网关可以解决微服务中通用代码的冗余问题(如权限控制,流量监控,限流等)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 3.网关组件在微服务中架构</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114155631.png" alt="image-20200720171205828"></p><h3 id="服务网关组件"><a href="#服务网关组件" class="headerlink" title="服务网关组件"></a>服务网关组件</h3><h4 id="zuul"><a href="#zuul" class="headerlink" title="zuul"></a>zuul</h4><p>Zuul is the front door for all requests from devices and web sites to the backend of the Netflix streaming application. As an edge service application, Zuul is built to enable dynamic routing, monitoring, resiliency and security.</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 0.原文翻译</span></span><br><span class="line"><span class="bullet">-</span> https://github.com/Netflix/zuul/wiki</span><br><span class="line"><span class="bullet">-</span> zul是从设备和网站到Netflix流媒体应用程序后端的所有请求的前门。作为一个边缘服务应用程序，zul被构建为支持动态路由、监视、弹性和安全性。</span><br><span class="line"></span><br><span class="line"><span class="section"># 1.zuul版本说明</span></span><br><span class="line"><span class="bullet">-</span> 目前zuul组件已经从1.0更新到2.0，但是作为springcloud官方不再推荐使用zuul2.0，但是依然支持zuul2.</span><br><span class="line"></span><br><span class="line"><span class="section"># 2.springcloud 官方集成zuul文档</span></span><br><span class="line"><span class="bullet">-</span> https://cloud.spring.io/spring-cloud-netflix/2.2.x/reference/html/#netflix-zuul-starter</span><br></pre></td></tr></table></figure><h4 id="gateway"><a href="#gateway" class="headerlink" title="gateway"></a>gateway</h4><p>This project provides a library for building an API Gateway on top of Spring MVC. Spring Cloud Gateway aims to provide a simple, yet effective way to route to APIs and provide cross cutting concerns to them such as: security, monitoring/metrics, and resiliency.</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 0.原文翻译</span></span><br><span class="line"><span class="bullet">-</span> https://spring.io/projects/spring-cloud-gateway</span><br><span class="line"><span class="bullet">-</span> 这个项目提供了一个在springmvc之上构建API网关的库。springcloudgateway旨在提供一种简单而有效的方法来路由到api，并为api提供横切关注点，比如：安全性、监控/度量和弹性。</span><br><span class="line"></span><br><span class="line"><span class="section"># 1.特性</span></span><br><span class="line"><span class="bullet">-</span> 基于springboot2.x 和 spring webFlux 和 Reactor 构建 响应式异步非阻塞IO模型</span><br><span class="line"><span class="bullet">-</span> 动态路由</span><br><span class="line"><span class="bullet">-</span> 请求过滤</span><br></pre></td></tr></table></figure><h6 id="1-开发网关动态路由"><a href="#1-开发网关动态路由" class="headerlink" title="1.开发网关动态路由"></a>1.开发网关动态路由</h6><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 0.翻译</span></span><br><span class="line"><span class="bullet">-</span> 网关配置有两种方式一种是快捷方式,一种是完全展开方式</span><br><span class="line"></span><br><span class="line"><span class="section"># 1.创建项目引入网关依赖</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入gateway网关依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114155735.png" alt="image-20200720175051402"></p><ul><li><strong>快捷方式配置路由</strong></li></ul><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 2.编写网关配置</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user_route</span><span class="comment"># 指定路由唯一标识</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:9999/</span> <span class="comment"># 指定路由服务的地址</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/user/**</span>  <span class="comment"># 指定路由规则</span></span><br><span class="line"></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">product_route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:9998/</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/product/**</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8989</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 3.启动gateway网关项目</span></span><br><span class="line"><span class="bullet">-</span> 直接启动报错:</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114155741.png" alt="image-20200720212535357"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> 在启动日志中发现,gateway为了效率使用webflux进行异步非阻塞模型的实现,因此和原来的web包冲突,去掉原来的web即可</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114155748.png" alt="image-20200720212653494"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> 再次启动成功启动</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114155753.png" alt="image-20200720213657788"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 4.测试网关路由转发</span></span><br><span class="line"><span class="bullet">-</span> 测试通过网关访问用户服务: http://localhost:8989/user/findOne?productId=21</span><br><span class="line"><span class="bullet">-</span> 测试通过网关访问商品服务: http://localhost:8989/product/findOne?productId=1</span><br></pre></td></tr></table></figure><ul><li><strong>java方式配置路由</strong></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RouteLocator <span class="title">customRouteLocator</span><span class="params">(RouteLocatorBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> builder.routes()</span><br><span class="line">                .route(<span class="string">&quot;order_route&quot;</span>, r -&gt; r.path(<span class="string">&quot;/order/**&quot;</span>)</span><br><span class="line">                        .uri(<span class="string">&quot;http://localhost:9997/&quot;</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114155759.png" alt="image-20200721103141491"></p><h6 id="2-查看网关路由规则列表"><a href="#2-查看网关路由规则列表" class="headerlink" title="2.查看网关路由规则列表"></a>2.查看网关路由规则列表</h6><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.说明</span></span><br><span class="line"><span class="bullet">-</span> gateway提供路由访问规则列表的web界面,但是默认是关闭的,如果想要查看服务路由规则可以在配置文件中开启</span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span>   <span class="comment">#开启所有web端点暴露</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> 访问路由管理列表地址</span><br><span class="line"><span class="bullet">-</span> http://localhost:8989/actuator/gateway/routes</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114155805.png" alt="image-20200720220647899"></p><h6 id="3-配置路由服务负载均衡"><a href="#3-配置路由服务负载均衡" class="headerlink" title="3.配置路由服务负载均衡"></a>3.配置路由服务负载均衡</h6><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.说明</span></span><br><span class="line"><span class="bullet">-</span> 现有路由配置方式,都是基于服务地址写死的路由转发,能不能根据服务名称进行路由转发同时实现负载均衡的呢?</span><br><span class="line"></span><br><span class="line"><span class="section"># 2.动态路由以及负载均衡转发配置</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user_route</span></span><br><span class="line">          <span class="comment">#uri: http://localhost:9999/</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://users</span><span class="comment"># lb代表转发后台服务使用负载均衡,users代表服务注册中心上的服务名</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/user/**</span></span><br><span class="line"></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">product_route</span></span><br><span class="line">          <span class="comment">#uri: http://localhost:9998/</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://products</span>          <span class="comment"># lb(loadbalance)代表负载均衡转发路由</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/product/**</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment">#开启根据服务名动态获取路由</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114155815.png" alt="image-20200721110013966"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114155820.png" alt="image-20200721110040104"></p><h6 id="4-常用路由predicate-断言-验证"><a href="#4-常用路由predicate-断言-验证" class="headerlink" title="4.常用路由predicate(断言,验证)"></a>4.常用路由predicate(断言,验证)</h6><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.Gateway支持多种方式的predicate</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114155825.png" alt="image-20200721112751340"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> After=2020-07-21T11:33:33.993+08:00[Asia/Shanghai]  `指定日期之后的请求进行路由</span><br><span class="line"><span class="bullet">-</span> Before=2020-07-21T11:33:33.993+08:00[Asia/Shanghai]       `指定日期之前的请求进行路由</span><br><span class="line"><span class="bullet">-</span> Between=2017-01-20T17:42:47.789-07:00[America/Denver], 2017-01-21T17:42:47.789-07:00[America/Denver]</span><br><span class="line"><span class="bullet">-</span> Cookie=username,chenyn`基于指定cookie的请求进行路由</span><br><span class="line"><span class="bullet">-</span> Cookie=username,[A-Za-z0-9]+`基于指定cookie的请求进行路由</span><br><span class="line"><span class="code">`curl http://localhost:8989/user/findAll --cookie &quot;username=zhangsna&quot;</span></span><br><span class="line"><span class="code">- Header=X-Request-Id, \d+ ``基于请求头中的指定属性的正则匹配路由(这里全是整数)</span></span><br><span class="line"><span class="code">`curl http://localhost:8989/user/findAll -H &quot;X-Request-Id:11&quot;</span></span><br><span class="line"><span class="code">- Method=GET,POST `基于指定的请求方式请求进行路由</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">- 官方更多: https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.3.RELEASE/reference/html/#the-cookie-route-predicate-factory</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 2.使用predicate</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user_route</span></span><br><span class="line">          <span class="comment">#uri: http://localhost:9999/</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://users</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/user/**</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">After=2020-07-21T11:39:33.993+08:00[Asia/Shanghai]</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Cookie=username,[A-Za-z0-9]+</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Header=X-Request-Id,</span> <span class="string">\d+</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114155833.png" alt="image-20200721152720455"></p><h6 id="5-常用的Filter以及自定义filter"><a href="#5-常用的Filter以及自定义filter" class="headerlink" title="5.常用的Filter以及自定义filter"></a>5.常用的Filter以及自定义filter</h6><p>Route filters allow the modification of the incoming HTTP request or outgoing HTTP response in some manner. Route filters are scoped to a particular route. Spring Cloud Gateway includes many built-in GatewayFilter Factories.</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.原文翻译</span></span><br><span class="line"><span class="bullet">-</span> 官网: </span><br><span class="line"><span class="code">https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.3.RELEASE/reference/html/#gatewayfilter-factories</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">- 路由过滤器允许以某种方式修改传入的HTTP请求或传出的HTTP响应。路由筛选器的作用域是特定路由。springcloudgateway包括许多内置的GatewayFilter工厂。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 2.作用</span></span><br><span class="line"><span class="code">- 当我们有很多个服务时，比如下图中的user-service、order-service、product-service等服务，客户端请求各个服务的Api时，每个服务都需要做相同的事情，比如鉴权、限流、日志输出等。</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114155838.png" alt="image-20200721161002001"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114155842.png" alt="image-20200721161421845"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 2.使用内置过滤器</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114155847.png" alt="image-20200721152425733"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> 更多参加官网:https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.3.RELEASE/reference/html/#gatewayfilter-factories</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 使用方式如下:</span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">product_route</span></span><br><span class="line">          <span class="comment">#uri: http://localhost:9998/</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://products</span>     <span class="comment"># lb: 使用负载均衡策略   products代表注册中心的具体服务名</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/product/**</span></span><br><span class="line">            <span class="comment">#- After=2020-07-30T09:45:49.078+08:00[Asia/Shanghai]</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">AddRequestParameter=id,34</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">AddResponseHeader=username,chenyn</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 3.使用自定义filter</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomGlobalFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;进入自定义的filter&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(exchange.getRequest().getQueryParams().get(<span class="string">&quot;username&quot;</span>)!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            log.info(<span class="string">&quot;用户身份信息合法,放行请求继续执行!!!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;非法用户,拒绝访问!!!&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;  <span class="comment">//filter 数字越小filter越先执行</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;           <span class="comment">//-1  最先执行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114160211.png" alt="image-20200721164304994"></p><hr><h2 id="Config组件使用"><a href="#Config组件使用" class="headerlink" title="Config组件使用"></a>Config组件使用</h2><h3 id="什么是Config"><a href="#什么是Config" class="headerlink" title="什么是Config"></a>什么是Config</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 0.说明</span></span><br><span class="line"><span class="bullet">-</span> https://cloud.spring.io/spring-cloud-static/spring-cloud-config/2.2.3.RELEASE/reference/html/#<span class="emphasis">_spring_</span>cloud<span class="emphasis">_config_</span>server</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> config(配置)又称为 统一配置中心顾名思义,就是将配置统一管理,配置统一管理的好处是在日后大规模集群部署服务应用时相同的服务配置一致,日后再修改配置只需要统一修改全部同步,不需要一个一个服务手动维护。</span><br><span class="line"></span><br><span class="line"><span class="section"># 1.统一配置中心组件流程图</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114160217.png" alt="image-20200721180134903"></p><h3 id="Config-Server-开发"><a href="#Config-Server-开发" class="headerlink" title="Config Server 开发"></a>Config Server 开发</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.引入依赖</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入统一配置中心--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 2.开启统一配置中心服务</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Configserver7878Application</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(Configserver7878Application.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114160224.png" alt="image-20200721182003376"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 3.修改配置文件</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">7878</span></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">configserver</span></span><br><span class="line"><span class="meta">spring.cloud.consul.host</span>=<span class="string">localhost</span></span><br><span class="line"><span class="meta">spring.cloud.consul.port</span>=<span class="string">8500</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114160229.png" alt="image-20200721182105648"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 4.直接启动服务报错</span></span><br><span class="line"><span class="bullet">-</span>  没有指定远程仓库的相关配置</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114160234.png" alt="image-20200721182142000"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 5.创建远程仓库</span></span><br><span class="line"><span class="bullet">-</span> github创建一个仓库</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114160239.png" alt="image-20200721183541178"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 6.复制仓库地址</span></span><br><span class="line"><span class="bullet">-</span> https://github.com/chenyn-java/configservers.git</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114160244.png" alt="image-20200721183727767"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 7.在统一配置中心服务中修改配置文件指向远程仓库地址</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.cloud.config.server.git.uri</span>=<span class="string">https://github.com/chenyn-java/configservers.git</span></span><br><span class="line"><span class="comment">#spring.cloud.config.server.git.username=       私有仓库访问用户名</span></span><br><span class="line"><span class="comment">#spring.cloud.config.server.git.password=私有仓库访问密码</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 8.再次启动统一配置中心</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114160249.png" alt="image-20200721221656436"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 9.拉取远端配置 [<span class="string">三种方式</span>][<span class="symbol"></span>]</span></span><br><span class="line"><span class="bullet">-</span> 1. http://localhost:7878/test-xxxx.properties</span><br><span class="line"><span class="bullet">-</span> 2. http://localhost:7878/test-xxxx.json</span><br><span class="line"><span class="bullet">-</span> 3. http://localhost:7878/test-xxxx.yml</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114160257.png" alt="image-20200721221951670"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 10.拉取远端配置规则</span></span><br><span class="line"><span class="bullet">-</span> label/name-profiles.yml</span><br><span class="line"><span class="code">`label   代表去那个分支获取 默认使用master分支</span></span><br><span class="line"><span class="code">`name    代表读取那个具体的配置文件文件名称</span></span><br><span class="line"><span class="code">`profile 代表读取配置文件环境</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114160301.png" alt="image-20200722105313716"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 11.查看拉取配置详细信息</span></span><br><span class="line"><span class="bullet">-</span> http://localhost:7878/client/dev       [<span class="string">client:代表远端配置名称</span>][<span class="symbol">dev:代表远程配置的环境</span>]</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114160305.png" alt="image-20200722105950808"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 12.指定分支和本地仓库位置</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.cloud.config.server.git.basedir</span>=<span class="string">/localresp #一定要是一个空目录,在首次会将该目录清空</span></span><br><span class="line"><span class="meta">spring.cloud.config.server.git.default-label</span>=<span class="string">master   #指定使用远程仓库中那个分支中内容</span></span><br></pre></td></tr></table></figure><h3 id="Config-Client-开发"><a href="#Config-Client-开发" class="headerlink" title="Config Client 开发"></a>Config Client 开发</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.项目中引入config client依赖</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入config client--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 2.编写配置文件</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.cloud.config.discovery.enabled</span>=<span class="string">true                #开启统一配置中心服务</span></span><br><span class="line"><span class="meta">spring.cloud.config.discovery.service-id</span>=<span class="string">configserver     #指定统一配置服务中心的服务唯一标识</span></span><br><span class="line"><span class="meta">spring.cloud.config.label</span>=<span class="string">master#指定从仓库的那个分支拉取配置</span></span><br><span class="line"><span class="meta">spring.cloud.config.name</span>=<span class="string">client#指定拉取配置文件的名称</span></span><br><span class="line"><span class="meta">spring.cloud.config.profile</span>=<span class="string">dev#指定拉取配置文件的环境</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 3.远程仓库创建配置文件</span></span><br><span class="line"><span class="bullet">-</span> client.properties[<span class="string">用来存放公共配置</span>][<span class="symbol"></span>]</span><br><span class="line"><span class="code">spring.application.name=configclient</span></span><br><span class="line"><span class="code">spring.cloud.consul.host=localhost</span></span><br><span class="line"><span class="code">spring.cloud.consul.port=8500</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">- client-dev.properties  [用来存放研发相关配置][注意:这里端口为例,以后不同配置分别存放]</span></span><br><span class="line"><span class="code">server.port=9099</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">- client-prod.properties[用来存放生产相关配置][]</span></span><br><span class="line"><span class="code">server.port=9098</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114160312.png" alt="image-20200722102322149"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 4.启动客户端服务进行远程配置拉取测试</span></span><br><span class="line"><span class="bullet">-</span> 直接启动过程中发现无法启动直接报错</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114160318.png" alt="image-20200722102851999">![image-20200722102901146](D:\BaiduNetdiskDownload\微服务工具集 SpringCloud &amp; Alibaba课程\springcloud资料\springcloud资料\笔记(含alibaba笔记)\SpringCloud 微服务工具集v1.1.assets\image-20200722102901146.png)</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 报错原因</span></span><br><span class="line"><span class="bullet">-</span> 项目中目前使用的是application.properties启动项目,使用这个配置文件在springboot项目启动过程中不会等待远程配置拉取,直接根据配置文件中内容启动,因此当需要注册中心,服务端口等信息时,远程配置还没有拉取到,所以直接报错</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114160322.png" alt="image-20200722103435260"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 解决方案</span></span><br><span class="line"><span class="bullet">-</span> 应该在项目启动时先等待拉取远程配置,拉取远程配置成功之后再根据远程配置信息启动即可,为了完成上述要求springboot官方提供了一种解决方案,就是在使用统一配置中心时应该将微服务的配置文件名修改为bootstrap.(properties|yml),bootstrap.properties作为配置启动项目时,会优先拉取远程配置,远程配置拉取成功之后根据远程配置启动当前应用。</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114160327.png" alt="image-20200722103823678"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 再次启动服务</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114160333.png" alt="image-20200722103913142"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114160336.png" alt="image-20200722104031932"></p><hr><h3 id="手动配置刷新"><a href="#手动配置刷新" class="headerlink" title="手动配置刷新"></a>手动配置刷新</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.说明</span></span><br><span class="line"><span class="bullet">-</span> 在生产环境中,微服务可能非常多,每次修改完远端配置之后,不可能对所有服务进行重新启动,这个时候需要让修改配置的服务能够刷新远端修改之后的配置,从而不要每次重启服务才能生效,进一步提高微服务系统的维护效率。在springcloud中也为我们提供了手动刷新配置和自动刷新配置两种策略,这里我们先试用手动配置文件刷新。</span><br><span class="line"></span><br><span class="line"><span class="section"># 2.在config client端加入刷新暴露端点</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">management.endpoints.web.exposure.include</span>=<span class="string">*            #开启所有web端点暴露  [推荐使用这种]</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114160342.png" alt="image-20200730161148097"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 3.在需要刷新代码的类中加入刷新配置的注解</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test/test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">      log.info(<span class="string">&quot;当前加载配置文件信息为:[&#123;&#125;]&quot;</span>,name);</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114160347.png" alt="image-20200722153537692"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 4.在远程配置中加入name并启动测试</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114160352.png" alt="image-20200722153731602"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 5.启动之后直接访问</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114160413.png" alt="image-20200722153806932"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 6.修改远程配置</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114160448.png" alt="image-20200722203225968"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 7.修改之后在访问</span></span><br><span class="line"><span class="bullet">-</span> 发现并没有自动刷新配置?</span><br><span class="line"><span class="bullet">-</span> 必须调用刷新配置接口才能刷新配置</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114160453.png" alt="image-20200722203317795"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 8.手动调用刷新配置接口</span></span><br><span class="line"><span class="bullet">-</span> curl -X POST http://localhost:9099/actuator/refresh</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114160459.png" alt="image-20200722203417879"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 9.在次访问发现配置已经成功刷新</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114160505.png" alt="image-20200722203452506"></p><hr><h2 id="Bus组件的使用"><a href="#Bus组件的使用" class="headerlink" title="Bus组件的使用"></a>Bus组件的使用</h2><h3 id="什么是Bus"><a href="#什么是Bus" class="headerlink" title="什么是Bus"></a>什么是Bus</h3><p>Spring Cloud Bus links nodes of a distributed system with a lightweight message broker. This can then be used to broadcast state changes (e.g. configuration changes) or other management instructions. AMQP and Kafka broker implementations are included with the project. Alternatively, any <a href="https://spring.io/projects/spring-cloud-stream">Spring Cloud Stream</a> binder found on the classpath will work out of the box as a transport.   –摘自官网</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 0.翻译</span></span><br><span class="line"><span class="bullet">-</span> https://spring.io/projects/spring-cloud-bus</span><br><span class="line"><span class="bullet">-</span> springcloudbus使用轻量级消息代理将分布式系统的节点连接起来。然后，可以使用它来广播状态更改（例如配置更改）或其他管理指令。AMQP和Kafka broker实现包含在项目中。或者，在类路径上找到的任何springcloudstream绑定器都可以作为传输使用。</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 通俗定义: bus称之为springcloud中消息总线,主要用来在微服务系统中实现远端配置更新时通过广播形式通知所有客户端刷新配置信息,避免手动重启服务的工作</span><br></pre></td></tr></table></figure><h3 id="实现配置刷新原理"><a href="#实现配置刷新原理" class="headerlink" title="实现配置刷新原理"></a>实现配置刷新原理</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114160624.png" alt="image-20200723150335451"></p><h3 id="搭建RabbitMQ服务"><a href="#搭建RabbitMQ服务" class="headerlink" title="搭建RabbitMQ服务"></a>搭建RabbitMQ服务</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 0.下载rabbitmq安装包 [][可以直接使用docker安装更方便]</span></span><br><span class="line"><span class="bullet">-</span> 官方安装包下载:https://www.rabbitmq.com/install-rpm.html#downloads</span><br><span class="line">[<span class="string">注意:</span>][<span class="symbol">这里安装包只能用于centos7.x系统</span>]</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114160630.png" alt="image-20190925220343521"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.将rabbitmq安装包上传到linux系统中</span></span><br><span class="line"><span class="code">erlang-22.0.7-1.el7.x86_64.rpm</span></span><br><span class="line"><span class="code">rabbitmq-server-3.7.18-1.el7.noarch.rpm</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 2.安装Erlang依赖包</span></span><br><span class="line"><span class="code">rpm -ivh erlang-22.0.7-1.el7.x86_64.rpm</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 3.安装RabbitMQ安装包(需要联网)</span></span><br><span class="line"><span class="code">yum install -y rabbitmq-server-3.7.18-1.el7.noarch.rpm</span></span><br><span class="line"><span class="code">注意:默认安装完成后配置文件模板在:/usr/share/doc/rabbitmq-server-3.7.18/rabbitmq.config.example目录中,需要将配置文件复制到/etc/rabbitmq/目录中,并修改名称为rabbitmq.config</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 4.复制配置文件</span></span><br><span class="line"><span class="code">cp /usr/share/doc/rabbitmq-server-3.7.18/rabbitmq.config.example /etc/rabbitmq/rabbitmq.config</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 5.查看配置文件位置</span></span><br><span class="line"><span class="code">ls /etc/rabbitmq/rabbitmq.config</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 6.修改配置文件(参见下图:)</span></span><br><span class="line"><span class="code">vim /etc/rabbitmq/rabbitmq.config </span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114160635.png" alt="image-20190925222230260"></p><p>将上图中配置文件中红色部分去掉<code>%%</code>,以及最后的<code>,</code>逗号 修改为下图:</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114160639.png" alt="image-20190925222329200"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 7.执行如下命令,启动rabbitmq中的插件管理</span></span><br><span class="line"><span class="code">rabbitmq-plugins enable rabbitmq_management</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">出现如下说明:</span></span><br><span class="line"><span class="code">Enabling plugins on node rabbit@localhost:</span></span><br><span class="line"><span class="code">    rabbitmq_management</span></span><br><span class="line"><span class="code">    The following plugins have been configured:</span></span><br><span class="line"><span class="code">      rabbitmq_management</span></span><br><span class="line"><span class="code">      rabbitmq_management_agent</span></span><br><span class="line"><span class="code">      rabbitmq_web_dispatch</span></span><br><span class="line"><span class="code">    Applying plugin configuration to rabbit@localhost...</span></span><br><span class="line"><span class="code">    The following plugins have been enabled:</span></span><br><span class="line"><span class="code">      rabbitmq_management</span></span><br><span class="line"><span class="code">      rabbitmq_management_agent</span></span><br><span class="line"><span class="code">      rabbitmq_web_dispatch</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    set 3 plugins.</span></span><br><span class="line"><span class="code">    Offline change; changes will take effect at broker restart.</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 8.启动RabbitMQ的服务</span></span><br><span class="line"><span class="code">systemctl start rabbitmq-server</span></span><br><span class="line"><span class="code">systemctl restart rabbitmq-server</span></span><br><span class="line"><span class="code">systemctl stop rabbitmq-server</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 9.查看服务状态(见下图:)</span></span><br><span class="line"><span class="code">systemctl status rabbitmq-server</span></span><br><span class="line"><span class="code">  ● rabbitmq-server.service - RabbitMQ broker</span></span><br><span class="line"><span class="code">     Loaded: loaded (/usr/lib/systemd/system/rabbitmq-server.service; disabled; vendor preset: disabled)</span></span><br><span class="line"><span class="code">     Active: active (running) since 三 2019-09-25 22:26:35 CST; 7s ago</span></span><br><span class="line"><span class="code">   Main PID: 2904 (beam.smp)</span></span><br><span class="line"><span class="code">     Status: &quot;Initialized&quot;</span></span><br><span class="line"><span class="code">     CGroup: /system.slice/rabbitmq-server.service</span></span><br><span class="line"><span class="code">             ├─2904 /usr/lib64/erlang/erts-10.4.4/bin/beam.smp -W w -A 64 -MBas ageffcbf -MHas ageffcbf -</span></span><br><span class="line"><span class="code">             MBlmbcs...</span></span><br><span class="line"><span class="code">             ├─3220 erl_child_setup 32768</span></span><br><span class="line"><span class="code">             ├─3243 inet_gethost 4</span></span><br><span class="line"><span class="code">             └─3244 inet_gethost 4</span></span><br><span class="line"><span class="code">      .........</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114160645.png" alt="image-20190925222743776"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 10.关闭防火墙服务</span></span><br><span class="line"><span class="code">systemctl disable firewalld</span></span><br><span class="line"><span class="code">    Removed symlink /etc/systemd/system/multi-user.target.wants/firewalld.service.</span></span><br><span class="line"><span class="code">    Removed symlink /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service.</span></span><br><span class="line"><span class="code">systemctl stop firewalld   </span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 11.访问web管理界面</span></span><br><span class="line"><span class="code">http://10.15.0.8:15672/</span></span><br></pre></td></tr></table></figure><p> <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114160653.png" alt="image-20190926194738708"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 12.登录管理界面</span></span><br><span class="line"><span class="code">username:  guest</span></span><br><span class="line"><span class="code">password:  guest</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114160659.png" alt="image-20190926194954822"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 13.MQ服务搭建成功</span></span><br></pre></td></tr></table></figure><h3 id="实现自动配置刷新"><a href="#实现自动配置刷新" class="headerlink" title="实现自动配置刷新"></a>实现自动配置刷新</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.在所有项目中引入bus依赖</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入bus依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114160706.png" alt="image-20200723104333906"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 2.配置统一配置中心连接到mq</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.rabbitmq.host</span>=<span class="string">localhost#连接主机</span></span><br><span class="line"><span class="meta">spring.rabbitmq.port</span>=<span class="string">5672#连接mq端口</span></span><br><span class="line"><span class="meta">spring.rabbitmq.username</span>=<span class="string">user#连接mq用户名</span></span><br><span class="line"><span class="meta">spring.rabbitmq.password</span>=<span class="string">password#连接mq密码</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 3.远端配置中加入连接mq配置</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114160712.png" alt="image-20200723105645915"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 4.启动统一配置中心服务</span></span><br><span class="line"><span class="bullet">-</span> 正常启动</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114160717.png" alt="image-20200723111220198"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 5.启动客户端服务</span></span><br><span class="line"><span class="bullet">-</span> 加入bus组件之后客户端启动报错</span><br><span class="line"><span class="bullet">-</span> 原因springcloud中默认链接不到远程服务器不会报错,但是在使用bus消息总线时必须开启连接远程服务失败报错</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114160727.png" alt="image-20200723111312496"></p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.cloud.config.fail-fast</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114160733.png" alt="image-20200723111754187"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 6.修改远程配置后在配置中心服务通过执行post接口刷新配置</span></span><br><span class="line"><span class="bullet">-</span> curl -X POST http://localhost:7878/actuator/bus-refresh</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114160739.png" alt="image-20200723112316476"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 7.通过上述配置就实现了配置统一刷新</span></span><br></pre></td></tr></table></figure><h3 id="指定服务刷新配置"><a href="#指定服务刷新配置" class="headerlink" title="指定服务刷新配置"></a>指定服务刷新配置</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.说明</span></span><br><span class="line"><span class="bullet">-</span> 默认情况下使用curl -X POST http://localhost:7878/actuator/bus-refresh这种方式刷新配置是全部广播形式,也就是所有的微服务都能接收到刷新配置通知,但有时我们修改的仅仅是某个服务的配置,这个时候对于其他服务的通知是多余的,因此就需要指定服务进行通知</span><br><span class="line"></span><br><span class="line"><span class="section"># 2.指定服务刷新配置实现</span></span><br><span class="line"><span class="bullet">-</span> 指定端口刷新某个具体服务: curl -X POST http://localhost:7878/actuator/bus-refresh/configclient:9090</span><br><span class="line"><span class="bullet">-</span> 指定服务id刷新服务集群节点: curl -X POST http://localhost:7878/actuator/bus-refresh/configclient</span><br><span class="line"> [<span class="string">注意:</span>][<span class="symbol">configclient代表刷新服务的唯一标识</span>]</span><br></pre></td></tr></table></figure><h3 id="集成webhook实现自动刷新"><a href="#集成webhook实现自动刷新" class="headerlink" title="集成webhook实现自动刷新"></a>集成webhook实现自动刷新</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.配置webhooks</span></span><br><span class="line"><span class="bullet">-</span> 添加webhooks</span><br><span class="line"><span class="bullet">-</span> 在webhooks中添加刷新配置接口</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114160746.png" alt="image-20200723120419412"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114160752.png" alt="image-20200723120947229"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 2.解决400错误问题</span></span><br><span class="line"><span class="bullet">-</span> 在配置中心服务端加入过滤器进行解决(springcloud中一个坑)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UrlFilter</span>  <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        HttpServletRequest httpServletRequest = (HttpServletRequest)request;</span><br><span class="line">        HttpServletResponse httpServletResponse = (HttpServletResponse)response;</span><br><span class="line"> </span><br><span class="line">        String url = <span class="keyword">new</span> String(httpServletRequest.getRequestURI());</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//只过滤/actuator/bus-refresh请求</span></span><br><span class="line">        <span class="keyword">if</span> (!url.endsWith(<span class="string">&quot;/bus-refresh&quot;</span>)) &#123;</span><br><span class="line">            chain.doFilter(request, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//获取原始的body</span></span><br><span class="line">        String body = readAsChars(httpServletRequest);</span><br><span class="line"> </span><br><span class="line">        System.out.println(<span class="string">&quot;original body:   &quot;</span>+ body);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//使用HttpServletRequest包装原始请求达到修改post请求中body内容的目的</span></span><br><span class="line">        CustometRequestWrapper requestWrapper = <span class="keyword">new</span> CustometRequestWrapper(httpServletRequest);</span><br><span class="line"> </span><br><span class="line">        chain.doFilter(requestWrapper, response);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">CustometRequestWrapper</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">CustometRequestWrapper</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(request);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ServletInputStream <span class="title">getInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>];</span><br><span class="line">            ByteArrayInputStream byteArrayInputStream = <span class="keyword">new</span> ByteArrayInputStream(bytes);</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ServletInputStream() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFinished</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> byteArrayInputStream.read() == -<span class="number">1</span> ? <span class="keyword">true</span>:<span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line"> </span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isReady</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line"> </span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setReadListener</span><span class="params">(ReadListener readListener)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">                &#125;</span><br><span class="line"> </span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> byteArrayInputStream.read();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">readAsChars</span><span class="params">(HttpServletRequest request)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"> </span><br><span class="line">        BufferedReader br = <span class="keyword">null</span>;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            br = request.getReader();</span><br><span class="line">            String str;</span><br><span class="line">            <span class="keyword">while</span> ((str = br.readLine()) != <span class="keyword">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                sb.append(str);</span><br><span class="line">            &#125;</span><br><span class="line">            br.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != br)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    br.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (IOException e)</span><br><span class="line">                &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/springCloud/20210114160808.png" alt="image-20200723121203864"></p><hr>]]></content>
      
      
      <categories>
          
          <category> springCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springCloudAlibaba </tag>
            
            <tag> springCloud </tag>
            
            <tag> 分布式 </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Intellij IDEA 使用技巧</title>
      <link href="2021/01/13/intellij-idea-shi-yong-ji-qiao/"/>
      <url>2021/01/13/intellij-idea-shi-yong-ji-qiao/</url>
      
        <content type="html"><![CDATA[<div class="note info flat"><p>本文更新于2021年1月13日</p></div><h2 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h2><p>IDEA 全称 IntelliJ IDEA，是java编程语言开发的集成环境。IntelliJ在业界被公认为最好的java开发工具，尤其在智能代码助手、代码自动提示、重构、JavaEE支持、各类版本工具(<a href="https://baike.baidu.com/item/git/12647237">git</a>、<a href="https://baike.baidu.com/item/svn/3311103">svn</a>等)、JUnit、CVS整合、代码分析、 创新的GUI设计等方面的功能可以说是超常的。IDEA是<a href="https://baike.baidu.com/item/JetBrains/7502758">JetBrains</a>公司的产品，这家公司总部位于<a href="https://baike.baidu.com/item/%E6%8D%B7%E5%85%8B%E5%85%B1%E5%92%8C%E5%9B%BD/418555">捷克共和国</a>的首都<a href="https://baike.baidu.com/item/%E5%B8%83%E6%8B%89%E6%A0%BC/632">布拉格</a>，开发人员以严谨著称的东欧程序员为主。它的旗舰版本还支持HTML，CSS，PHP，MySQL，Python等。免费版只支持Java,Kotlin等少数语言。</p>]]></content>
      
      
      <categories>
          
          <category> IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
            <tag> 技巧 </tag>
            
            <tag> 使用说明 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown试验</title>
      <link href="2021/01/12/markdown-shi-yan/"/>
      <url>2021/01/12/markdown-shi-yan/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo搭建个人Blog"><a href="#Hexo搭建个人Blog" class="headerlink" title="Hexo搭建个人Blog"></a>Hexo搭建个人Blog</h1><h2 id="hexo简介："><a href="#hexo简介：" class="headerlink" title="hexo简介："></a>hexo简介：</h2><p> Hexo 是一个静态博客框架，基于 Node.js，将 Markdown 文章通过渲染引擎，生成一个静态网页，再结合 Git 命令（ssh），Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h3 id="超快速度"><a href="#超快速度" class="headerlink" title="超快速度"></a>超快速度</h3><p>Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。</p><h3 id="支持-Markdown"><a href="#支持-Markdown" class="headerlink" title="支持 Markdown"></a>支持 Markdown</h3><p>Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。</p><h3 id="一键部署"><a href="#一键部署" class="headerlink" title="一键部署"></a>一键部署</h3><p>只需一条指令即可部署到 GitHub Pages, Heroku 或其他平台。</p><h3 id="插件和可扩展性"><a href="#插件和可扩展性" class="headerlink" title="插件和可扩展性"></a>插件和可扩展性</h3><p>强大的 API 带来无限的可能，与数种模板引擎（EJS，Pug，Nunjucks）和工具（Babel，PostCSS，Less/Sass）轻易集成。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># hexo框架的安装</span><br><span class="line">npm install -g hexo-cli</span><br><span class="line"># 等上一个命令完成后，在输入下面的命令</span><br><span class="line">hexo init &lt;新建文件夹的名称&gt;  #初始化文件夹</span><br><span class="line">cd &lt;新建文件夹的名称&gt;</span><br><span class="line">npm install  # 安装博客所需要的依赖文件</span><br><span class="line"># Hexo会根据配置文件渲染出一套静态页面</span><br><span class="line">hexo g</span><br><span class="line"># 将上一步渲染出的一系列文件上传至至Github Pages</span><br><span class="line">hexo d</span><br><span class="line"># 也可以直接输入此命令，直接完成渲染和上传</span><br><span class="line">hexo g -d</span><br><span class="line"></span><br><span class="line">npm install hexo-deployer-git --save    #安装git插件</span><br><span class="line"></span><br><span class="line">config添加配置</span><br><span class="line">type: git</span><br><span class="line">repo: git@github.com:Github用户名&#x2F;github用户名.github.io.git  </span><br><span class="line">&#x2F;&#x2F;也可使用https地址，如：https:&#x2F;&#x2F;github.com&#x2F;Github用户名&#x2F;Github用户名.github.io.git            </span><br><span class="line">branch: master</span><br><span class="line"></span><br><span class="line">引用本地图片：</span><br><span class="line">npm install https:&#x2F;&#x2F;github.com&#x2F;xcodebuild&#x2F;hexo-asset-image.git</span><br><span class="line"># or yarn add https:&#x2F;&#x2F;github.com&#x2F;xcodebuild&#x2F;hexo-asset-image.git</span><br><span class="line"></span><br><span class="line">配置文件_config.yml 里的post_asset_folder:这个选项设置为true</span><br></pre></td></tr></table></figure><h2 id="Front-matter："><a href="#Front-matter：" class="headerlink" title="Front-matter："></a>Front-matter：</h2><p>Front-matter 是档案最上方以 — 分隔的区域，用于指定个别档案的变数。</p><p>如果标注可选的参数，可根据自己需要添加，不用全部都写在markdown里</p><h3 id="Page-Front-matter"><a href="#Page-Front-matter" class="headerlink" title="Page Front-matter"></a>Page Front-matter</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">type:</span><br><span class="line">comments:</span><br><span class="line">description:</span><br><span class="line">keywords:</span><br><span class="line">top_img:</span><br><span class="line">mathjax:</span><br><span class="line">katex:</span><br><span class="line">aside:</span><br><span class="line">aplayer:</span><br><span class="line">highlight_shrink:</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/markdown/20210112164941.png" alt="image-20210112164941030"></p><h3 id="Post-Front-matter"><a href="#Post-Front-matter" class="headerlink" title="Post Front-matter"></a>Post Front-matter</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">keywords:</span><br><span class="line">description:</span><br><span class="line">top_img:</span><br><span class="line">comments:</span><br><span class="line">cover:</span><br><span class="line">toc:</span><br><span class="line">toc_number:</span><br><span class="line">copyright:</span><br><span class="line">copyright_author:</span><br><span class="line">copyright_author_href:</span><br><span class="line">copyright_url:</span><br><span class="line">copyright_info:</span><br><span class="line">mathjax:</span><br><span class="line">katex:</span><br><span class="line">aplayer:</span><br><span class="line">highlight_shrink:</span><br><span class="line">aside:</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/hnnwb/myImg/raw/master/imgs/markdown/20210112165355.png" alt="image-20210112165354917"></p><h3 id="hexo常用命令"><a href="#hexo常用命令" class="headerlink" title="hexo常用命令"></a>hexo常用命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo n &quot;我的第一篇文章&quot; 等价于 hexo new &quot;我的第一篇文章&quot; 还等价于 hexo new post &quot;我的第一篇文章&quot;</span><br><span class="line">hexo p 等价于 hexo publish</span><br><span class="line">hexo g 等价于 hexo generate</span><br><span class="line">hexo s等价于 hexo server</span><br><span class="line">hexo d 等价于 hexo deploy</span><br><span class="line">hexo deploy -g 等价于 hexo deploy --generate</span><br><span class="line">hexo generate -d等价于hexo generate --deploy</span><br></pre></td></tr></table></figure><h4 id="指令说明"><a href="#指令说明" class="headerlink" title="指令说明:"></a>指令说明:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo server #Hexo 会监视文件变动并自动更新，除修改站点配置文件外,无须重启服务器,直接刷新网页即可生效。</span><br><span class="line">hexo server -s #以静态模式启动</span><br><span class="line">hexo server -p 5000 #更改访问端口 (默认端口为4000，&#39;ctrl + c&#39;关闭server)</span><br><span class="line">hexo server -i IP地址 #自定义 IP</span><br><span class="line">hexo clean #清除缓存 ,网页正常情况下可以忽略此条命令,执行该指令后,会删掉站点根目录下的public文件夹</span><br><span class="line">hexo g #生成静态网页 (执行 $ hexo g后会在站点根目录下生成public文件夹, hexo会将&quot;&#x2F;blog&#x2F;source&#x2F;&quot; 下面的.md后缀的文件编译为.html后缀的文件,存放在&quot;&#x2F;blog&#x2F;public&#x2F; &quot; 路径下)</span><br><span class="line">hexo d #将本地数据部署到远端服务器(如github)</span><br><span class="line">hexo init 文件夹名称 #初始化XX文件夹名称</span><br><span class="line">npm update hexo -g#升级</span><br><span class="line">npm install hexo -g#安装</span><br><span class="line">node-v #查看node.js版本号</span><br><span class="line">npm -v #查看npm版本号</span><br><span class="line">git --version #查看git版本号</span><br><span class="line">hexo -v #查看hexo版本号</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo publish [layout] &lt;title&gt;  </span><br><span class="line">#通过 &#96;publish&#96; 命令将草稿移动到 &#96;source&#x2F;_posts&#96; 文件夹,如:&#96;$ hexo publish [layout] &lt;title&gt;&#96;,草稿默认是不会显示在页面中的，可在执行时加上 &#96;--draft&#96; 参数，或是把 &#96;render_drafts&#96; 参数设为 &#96;true&#96;来预览草稿。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/01/08/hello-world/"/>
      <url>2021/01/08/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>wbOne</title>
      <link href="2021/01/06/wbone/"/>
      <url>2021/01/06/wbone/</url>
      
        <content type="html"><![CDATA[<div class="note info flat"><p>试验markdown语法</p></div><h2 id="本地插图"><a href="#本地插图" class="headerlink" title="本地插图"></a>本地插图</h2><h2 id><a href="#" class="headerlink" title></a><img src= "/img/loading.gif" data-lazy-src="/2021/01/06/wbone/about-BY-gentle.jpg" alt="about-BY-gentle"></h2><h2 id="横线"><a href="#横线" class="headerlink" title="横线"></a>横线</h2><p>*** and—and___and—-都可以显示分割线效果</p><hr><hr><hr><h2 id="标题："><a href="#标题：" class="headerlink" title="标题："></a>标题：</h2><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h2 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h2><h3 id="普通文本："><a href="#普通文本：" class="headerlink" title="普通文本："></a>普通文本：</h3><p>这是普通文本</p><h3 id="单行文本："><a href="#单行文本：" class="headerlink" title="单行文本："></a>单行文本：</h3><p>​    你好，这是一行单行文本。</p><h3 id="文本块："><a href="#文本块：" class="headerlink" title="文本块："></a>文本块：</h3><p>语法1：</p><p>​    欢迎到访</p><p>​    很高兴见到你</p><p>语法2：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">欢迎到访</span><br><span class="line">很高兴见到你</span><br></pre></td></tr></table></figure><h3 id="文字高亮："><a href="#文字高亮：" class="headerlink" title="文字高亮："></a>文字高亮：</h3><p><code>王先生</code> <code>Java</code></p><h3 id="换行："><a href="#换行：" class="headerlink" title="换行："></a>换行：</h3><p>直接回车不能换行，可以在上一行文本后面补两个空格，这样下一行的文本就换行了。</p><p>或者就是在两行文本直接加一个空行。</p><p>也能实现换行效果，不过这个行间距有点大。</p><h3 id="斜体、粗体、删除线："><a href="#斜体、粗体、删除线：" class="headerlink" title="斜体、粗体、删除线："></a>斜体、粗体、删除线：</h3><table><thead><tr><th align="center">语法</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center"><code>*斜体1*</code></td><td align="center"><em>斜体1</em></td></tr><tr><td align="center"><code>_斜体2_</code></td><td align="center"><em>斜体2</em></td></tr><tr><td align="center"><code>**粗体1**</code></td><td align="center"><strong>粗体1</strong></td></tr><tr><td align="center"><code>__粗体2__</code></td><td align="center"><strong>粗体2</strong></td></tr><tr><td align="center"><code>这是一个 ~~删除线~~</code></td><td align="center"><del>删除线</del></td></tr><tr><td align="center"><code>***斜粗体1***</code></td><td align="center"><strong><em>斜粗体1</em></strong></td></tr><tr><td align="center"><code>___斜粗体2___</code></td><td align="center"><strong><em>斜粗体2</em></strong></td></tr><tr><td align="center"><code>***~~斜粗体删除线1~~***</code></td><td align="center"><strong><em><del>斜粗体删除线1</del></em></strong></td></tr><tr><td align="center"><code>~~***斜粗体删除线2***~~</code></td><td align="center"><del><strong><em>斜粗体删除线2</em></strong></del></td></tr></tbody></table><p>斜体、粗体、删除线可混合使用</p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>基本格式：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![alt](URL title)</span><br></pre></td></tr></table></figure><p><code>alt</code> 和 <code>title</code> 即对应 <code>HTML</code> 中的 <code>alt</code> 和 <code>title</code> 属性（都可省略）：</p><ul><li><p><code>alt</code> 表示图片显示失败时的替换文本</p></li><li><p><code>title</code> 表示鼠标悬停在图片时的显示文本（注意这里要加引号）</p></li></ul><p><code>URL</code> 即图片的 <code>url</code> 地址，如果引用本仓库中的图片，直接使用<strong>相对路径</strong>就可了，如果引用其他 <code>github</code> 仓库中的图片要注意格式，即：<code>仓库地址/raw/分支名/图片路径</code>，如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;guodongxiaren&#x2F;ImageCache&#x2F;raw&#x2F;master&#x2F;Logo&#x2F;foryou.gif</span><br></pre></td></tr></table></figure><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><h3 id="链接外部-URL"><a href="#链接外部-URL" class="headerlink" title="链接外部 URL"></a>链接外部 URL</h3><table><thead><tr><th align="center">语法</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center"><code>【我的博客】（http://hnnwb.github.io）</code></td><td align="center"><a href="http://hnnwb.github.io/">我的博客</a></td></tr><tr><td align="center"><code>[我的博客][wbblog]</code></td><td align="center"><a href="http://hnnwb.github.io/">我的博客</a></td></tr><tr><td align="center"><code>[wbblog](http://hnnwb.github.io &quot;欢迎关注我的博客&quot;)</code></td><td align="center"><a href="http://hnnwb.github.io/" title="欢迎关注我的博客">wbblog</a></td></tr></tbody></table><p>语法 2 由两部分组成：</p><ul><li>第一部分使用两个中括号，[ ] 里的标识符（本例中 <code>zhihu</code>），可以是数字，字母等的组合，标识符上下对应就行了（<strong>姑且称之为 URL 标识符</strong>）</li><li>第二部分标记实际 <code>URL</code>。</li></ul><blockquote><p>使用 <code>URL</code> 标识符能达到复用的目的，一般把全文所有的 URL 标识符统一放在文章末尾，这样看起来比较干净。</p><blockquote><p><code>URL</code> 标识符是我起的名字，不知道是否准确。囧。。</p></blockquote></blockquote><h3 id="链接本仓库里的-URL"><a href="#链接本仓库里的-URL" class="headerlink" title="链接本仓库里的 URL"></a>链接本仓库里的 URL</h3><table><thead><tr><th align="center">语法</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center"><code>[我的简介]</code></td><td align="center">（/example/jianjie.md）</td></tr><tr><td align="center"></td><td align="center"></td></tr></tbody></table><h3 id="图片链接"><a href="#图片链接" class="headerlink" title="图片链接"></a>图片链接</h3><p>给图片加链接的本质是混合图片显示语法和普通的链接语法。<br>普通的链接中 <code>[ ]</code> 内部是链接要显示的文本，而图片链接 <code>[ ]</code> 里面则是要显示的图片。<br>直接混合两种语法当然可以，但是十分啰嗦，为此我们可以使用 <code>URL</code> 标识符的形式。</p><table><thead><tr><th align="center">语法</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 测试blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
